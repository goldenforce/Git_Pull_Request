<?xml version="1.0" encoding="ISO-8859-1"?>
<MappingFunctions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="MappingFunctions.xsd" Author="GoldenSource" DocumentVersion="8.1">
    <ExceptionTypes>
        <ExceptionType Name="EmptyParam">
            <Description>This happens if a parameter declared as &apos;can not be empty&apos; is empty</Description>
            <MapperVersion from="1.0"/>
        </ExceptionType>
        <ExceptionType Name="InvalidParameter">
            <Description>One of the Parameters was invalid</Description>
            <MapperVersion from="1.0"/>
        </ExceptionType>
        <ExceptionType Name="Limit">
            <Description>Value range overflow</Description>
            <MapperVersion from="1.0"/>
        </ExceptionType>
        <ExceptionType Name="ParamError">
            <Description>One of the Parameters was invalid</Description>
            <MapperVersion from="1.0"/>
        </ExceptionType>
        <ExceptionType Name="RuntimeParamError">
            <Description>A Runtime Parameter was invalid</Description>
        </ExceptionType>
        <ExceptionType Name="NotANumber">
            <Description>The checked value contains not numeric values</Description>
        </ExceptionType>
        <ExceptionType Name="TranslateFailed">
            <Description>There is no given value (Parameter Value) found in the translation table</Description>
        </ExceptionType>
        <ExceptionType Name="PrecisionLimit">
            <Description>The Maximum number of decimal values was exceeded</Description>
        </ExceptionType>
    </ExceptionTypes>
    <MappingFunctionLibrary Name="MapFunc">
        <Description>Contains all common mapping functions</Description>
        <MapperVersion from="1.0"/>
        <Function Type="Simple" FunctionNumber="72">
            <Name>Common.GetEnvironment</Name>
            <MapperVersion from="2.2.0.1"/>
            <Description>This function returns the value of an operating system environment variable. If the variable was not set (does not exist) then a &quot;&quot; empty string is returned. 
Note: This function is case sensitive!</Description>
            <InputParameter Name="VariableName" Datatype="String" Nullable="true" Relevance="3">
                <Description>Name of the Operating System environment variable</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>If the environment variable with the name &lt;VariableName&gt; exists, the value of this environment variable is returned. If the environment variable was not set or does not exist, an empty string (&quot;&quot;) is returned.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>PATH</InputParameter>
                    <OutputParameter>/export/home/wdorning:/usr/bin</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>FTI_CONFIG_ROOT</InputParameter>
                    <OutputParameter>/export/home/wdorning/MM2201</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="74">
            <Name>Common.GetMessageKey</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function returns the key of the messages (used for key streaming) that was calculated from the settings in the MSF file: Key Column for variable feeds, Begin/End Fixed Key for fixed feeds, &lt;!--MM_BusinessEngineKey=...--&gt; for XML feeds or the new &quot;KeyExpression&quot; functionality of MM6 and higher.</Description>
            <ShortDescription>Returns the key that will be used to sort the messages for publishing</ShortDescription>
            <OutputParameter Datatype="String">
                <Description>Key of the message if key streaming is activated, else an empty string</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="84" designerOnly="true">
            <Name>Common.GetRecordIdentifier</Name>
            <MapperVersion from="8.1.1.1"/>
            <Description>This function returns the so-called record identifier of the messages that was calculated by the record identifier expression as defined in the mapping.</Description>
            <ShortDescription>Returns the record identifier of the current messages</ShortDescription>
            <OutputParameter Datatype="String">
                <Description>Record identifier</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="73">
            <Name>Common.GetRuntimeParameter</Name>
            <MapperVersion from="2.2.0.1"/>
            <Description>This function returns the value of a mapping parameter that was specified at the Message Mapper&apos;s command line.
with the command parameter &quot;--mapparameter&quot; followed by a list of variable name and value pairs in the following format:

--mapparameter=&quot;name1=value1|name2=value2|name3=value3...&quot;

The GetRuntimeParameter function retrieves the value of a named variable.
Note: This function is case sensitive!.</Description>
            <ShortDescription>Returns the value of a mapparameter specified at the mapper&apos;s command line</ShortDescription>
            <InputParameter Name="VariableName" Datatype="String" Nullable="true" Relevance="3">
                <Description>Name of the parameter in the mapparameterstring</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>If the mapparameter with the name VariableName exists the value of this mapparameter is returned. If the mapparameter is not available (in the mapparameter list), an error occurs.</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="RuntimeParamError">
                    <Condition>If the function was called to query a value of a mapparameter that does not exist</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Description>MessageMapper ... --mapparameter=&quot;vendor=Bloomberg|date=01/01/2002|user=Walter&quot; msffile.msf input-file.in</Description>
                <Example>
                    <InputParameter>vendor</InputParameter>
                    <OutputParameter>Bloomberg</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>date</InputParameter>
                    <OutputParameter>01/01/2002</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>user</InputParameter>
                    <OutputParameter>Walter</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="77">
            <Name>Logical.IsSendNullFlagSet</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function determines if the &apos;send null&apos; flag for a value is set or not. Note: This feature replaces the send null macro.</Description>
            <InputParameter Datatype="Any" Name="Value" Nullable="true" Relevance="3">
                <Description>This function determines if the &apos;send null&apos; flag for a value is set or not</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True, if the flag is set and false if not</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="43">
            <Name>Common.SequenceNext</Name>
            <MapperVersion from="1.1"/>
            <Description>This function increases the (global) sequence number and returns it as a string with leading zeros. The length of the string is specified by the input parameter.</Description>
            <InputParameter Name="Digits" Datatype="Integer" Nullable="true" Relevance="3">
                <Description>The number of digits which should be used for the output sequence string</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Next sequence number</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>The First Parameter must implement the following: 0 &lt; param &lt; 255</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <Comment>Function is called the first time</Comment>
                    <InputParameter>4</InputParameter>
                    <OutputParameter>0001</OutputParameter>
                </Example>
                <Example>
                    <Comment>Function is called the 2nd time</Comment>
                    <InputParameter>6</InputParameter>
                    <OutputParameter>000002</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="42">
            <Name>Common.SequenceReset</Name>
            <MapperVersion from="1.1"/>
            <Description>this function sets the global variable for a sequence number to zero (this part is locked by critical section)</Description>
        </Function>
        <Function Type="Simple" FunctionNumber="76">
            <Name>Logical.SetSendNullFlag</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function sets the &apos;send null&apos; flag for a value, which indicates that the value should not be written to the output message. It also sets the value to null. The default value of this flag is &apos;false&apos; which means that the value is written to the message.
Note: This feature replaces the send null macro. Calling this function does not set the send null macro to the value. See also IsSendNullFlagSet.</Description>
            <ShortDescription>Returns a result value having the &apos;send null&apos; flag set. The result is of the same type as the input value</ShortDescription>
            <InputParameter Datatype="Any" Name="Value" Nullable="true" Relevance="2">
                <Description>value for which to set the &apos;send null&apos; flag</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>A result value having the &apos;send null&apos; flag set. The result is of the same type as the input value</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="188">
            <Name>DateTime.DateTime2Float</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function converts a date time string to a time difference to Jan, 1st 0001 in seconds.</Description>
            <InputParameter Datatype="String" Name="DateTime" Nullable="true" Relevance="3">
                <Description>Date/time input string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>Format of the date/time input string. (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>Double value that holds the seconds passed since 01/01/0000</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>63182295000</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10-12-1492 12:00:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>47107656000</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>12-31-2099</InputParameter>
                    <InputParameter>%M-%D-%Y</InputParameter>
                    <OutputParameter>66269577600</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="189">
            <Name>DateTime.Float2DateTime</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function converts a Float value into a date time string. The float value must be a time difference, in seconds, from 1 January 0001 .</Description>
            <InputParameter Datatype="FloatingPoint" Name="InputValue" Nullable="true" Relevance="3">
                <Description>The double value to be converted</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="DateTimeFormat" Nullable="false" Relevance="2">
                <Description>Requested output format of the date. (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The calculated date time string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>63182295000</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>03-02-2002 13:30:00</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>47107656000</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>10-12-1492 12:00:00</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>66269577600</InputParameter>
                    <InputParameter>%M-%D-%Y</InputParameter>
                    <OutputParameter>12-31-2099</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="41">
            <Name>String.Float2String</Name>
            <MapperVersion from="1.1"/>
            <Alias>Conversion.Double2String</Alias>
            <Description>This function converts a float value to a formatted string.</Description>
            <InputParameter Datatype="FloatingPoint" Name="InputValue" Nullable="true" Relevance="2" AllowDataType="Integer">
                <Description>The double value</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="PreVal" Nullable="true" Relevance="3">
                <Description>The count of digits before the decimal point</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="PostVal" Nullable="true" Relevance="3">
                <Description>The count of digits after the decimal point</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The converted FloatingPoint number (an empty string if InputValue is empty).</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>PreVal &lt; count of digits before the decimal point</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>1234.345</InputParameter>
                    <InputParameter>4</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>1234.345</OutputParameter>
                </Example>
                <Example>
                    <InputParameter/>
                    <InputParameter>3</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter/>
                </Example>
                <Example>
                    <InputParameter>2.01</InputParameter>
                    <InputParameter>3</InputParameter>
                    <InputParameter>5</InputParameter>
                    <OutputParameter>002.01000</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="40">
            <Name>String.Ratio2Float</Name>
            <MapperVersion from="1.1"/>
            <Alias>Conversion.Ration2Double</Alias>
            <Description>This function converts a ratio string into a float value.</Description>
            <InputParameter Datatype="String" Name="RatioString" Nullable="false" Relevance="3">
                <Description>-</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>The converted ratio string</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>1.	RatioString contains the characters &quot;p&quot; or &quot;f&quot; but not the strings &quot;per&quot; or &quot;for&quot;
2.	RatioString contains the character &quot;%&quot; and the part before the % exists not only of numbers
3.	RatioString contains the character &quot;%&quot; and the part before the % is lower than 0.0
4.	RatioString does not contain the character &quot;%&quot; and the string value contains non-numeric characters.
5.	RatioString does not contain the character &quot;%&quot; and the string value is less than 0.0
6.	A part of RatioString is empty or the length is 0
7.	Operative parts of RatioString contain non-numeric characters.
8.	The dividend or the divisor of RatioString is below 0.0</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>10 : 100</InputParameter>
                    <OutputParameter>0.1</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10 / 100</InputParameter>
                    <OutputParameter>0.1</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10 per 100</InputParameter>
                    <OutputParameter>0.1</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="39">
            <Name>String.String2Float</Name>
            <MapperVersion from="1.1"/>
            <Alias>Conversion.String2Double</Alias>
            <Description>This function converts a string to a floating-point value.</Description>
            <InputParameter Datatype="String" Name="StringToConvert" Nullable="false" Relevance="2">
                <Description>-</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="PositionOfDecimal" Nullable="false" Relevance="3">
                <Description>This parameter specifies the position of the decimal point in the string, which is used to determine the right double value</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>The floating-point value from the converted string</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>1.	The StringToConvert has a decimal point and contains non-numeric characters.
2.	The PositionOfDecimal is greater than the length of StringToConvert.
3.	The StringToConvert has no decimal point and contains non-numeric characters.</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>12345</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>12.345</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>12TEST</InputParameter>
                    <InputParameter>4</InputParameter>
                    <OutputParameter>A ParamError occurs</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="48">
            <Name>String.String2Integer</Name>
            <MapperVersion from="2.2.0.7"/>
            <Description>This function converts a string into an integer value.</Description>
            <InputParameter Datatype="String" Name="StringValue" Nullable="false" Relevance="1">
                <Description>The string to convert</Description>
            </InputParameter>
            <OutputParameter Datatype="Integer">
                <Description>The result of the conversion of StringValue</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>StringValue must consist of numeric characters</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>1234</InputParameter>
                    <OutputParameter>1234</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="47">
            <Name>String.Translate2Float</Name>
            <MapperVersion from="2.0.0.1"/>
            <Alias>Conversion.Translate2Double</Alias>
            <Description>This function translates a string value into a float value. The input string must be in the following format:
-	The first byte of the string specifies the position of the decimal point, counting from the right.
-	The rest of the field, after the decimal point, contains the digits of the number (the whole number and the decimal places).</Description>
            <ShortDescription>This function translates a string value into a float value</ShortDescription>
            <InputParameter Datatype="String" Name="InputString" Nullable="false" Relevance="2">
                <Description>-</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Precision" Nullable="false" Relevance="3">
                <Description>This parameter is optional. If it is not given the default value will be 0</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>The converted string</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="NotANumber">
                    <Condition>The InputString must exist of numbers</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>641500000</InputParameter>
                    <InputParameter/>
                    <OutputParameter>41.5</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>641500000</InputParameter>
                    <InputParameter>4</InputParameter>
                    <OutputParameter>4150</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="181">
            <Name>DateTime.DateDiffDays</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Replaced by new function: DateTime.DateDiff</Obsolete>
            </MapperVersion>
            <Description>This function determines the difference of two date/time values in days. The time value of the date time values is ignored. If the second time parameter is less than (before) the first one the return value is negative.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="Integer">
                <Description>Integer value that holds the days between Date1 and Date2. If Date2 is less than (before) Date1, the return value is negative</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>03-05-2002 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>3</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>03-02-2001 13:30:00</InputParameter>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>365</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>03-02-2001 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>-365</OutputParameter>
                </Example>
                <Example>
                    <InputParameter/>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>0</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter/>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>0</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="182">
            <Name>DateTime.DateDiffSeconds</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Replaced by new function: DateTime.DateDiff</Obsolete>
            </MapperVersion>
            <Description>This function determines the difference of two date time values in seconds.
if the second time parameter is less than (before) the first one the return value will be negative.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>Double value that holds the seconds between Date1 and Date2. If Date2 is less than (before) Date1, the return value is negative</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>03-02-2002 13:30:01</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>1</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>03-02-2001 11:00:00</InputParameter>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>31545000</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>03-02-2001 11:00:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>-31545000</OutputParameter>
                </Example>
                <Example>
                    <InputParameter/>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>0</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>03-02-2002 13:30:00</InputParameter>
                    <InputParameter/>
                    <InputParameter>%M-%D-%Y %H:%I:%S</InputParameter>
                    <OutputParameter>0</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="176">
            <Name>DateTime.DateEqual</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function determines if the first date time parameter and the second date time parameter are equal.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if Date1 and Date2 are equal</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>20021227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="177">
            <Name>DateTime.DateGreater</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function determines if the first date time parameter is greater (later) than the second date time parameter.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if Date1 is greater than Date2</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>20021227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="178">
            <Name>DateTime.DateGreaterEqual</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function determines if the first date time parameter is greater (later) than or equal to the second date time parameter.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if Date1 is greater or equal than Date2</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>20021227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="179">
            <Name>DateTime.DateLess</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function determines if the first date time parameter is less than (before) the second date time parameter.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if Date1 is less than Date2</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>20021227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="180">
            <Name>DateTime.DateLessEqual</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function determines if the first date time parameter is less than (before) or equal to the second date time parameter.</Description>
            <InputParameter Datatype="String" Name="Date1" Nullable="true" Relevance="3">
                <Description>First input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Date2" Nullable="true" Relevance="3">
                <Description>Second input date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>Format string (see Format Specification)</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if Date1 is less or equal than Date2</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>20021227012225</InputParameter>
                    <InputParameter>20001227012225</InputParameter>
                    <InputParameter>%y%m%d%H%i%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="20">
            <Name>String.TransformDate</Name>
            <MapperVersion from="1.0"/>
            <Description>This function converts a string that contains date/time information into an FTI date string (MM-DD-YYYY hh:mm:ss XM). The input string must be in one of these formats:
			YYYY,
			YYYYMM,
			YYYYMMDD,
			HH:MM:SS) : .</Description>
            <ShortDescription>Converts a string that contains date/time information into an FTI date string</ShortDescription>
            <InputParameter Name="OrigInDate" Datatype="String" Nullable="true" Relevance="2">
                <Description>Input date, which must be in one of the following formats: YYYY, YYYYMM, YYYYMMDD or HH:MM:SS. If MM or DD is missing &quot;01&quot; is assumed</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Returns a formatted FTI date/time string. If the OrigInDate is empty, an empty string is returned.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20001019</InputParameter>
                    <OutputParameter>10-19-2000 12:00:00 AM</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>200010</InputParameter>
                    <OutputParameter>10-01-2000 12:00:00 AM</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2000</InputParameter>
                    <OutputParameter>01-01-2000 12:00:00 AM</OutputParameter>
                </Example>
                <Example>
                    <Comment>Assume 06/13/2002 as current date</Comment>
                    <InputParameter>12:47:38</InputParameter>
                    <OutputParameter>06-13-2002 12:47:38 PM</OutputParameter>
                </Example>
                <Example>
                    <Comment>Empty string (input not a valid date)</Comment>
                    <InputParameter>NULL</InputParameter>
                </Example>
                <Example>
                    <Comment>Empty string</Comment>
                </Example>
                <Example>
                    <Comment>Invalid date</Comment>
                    <InputParameter>99:47:38</InputParameter>
                </Example>
                <Example>
                    <Comment>Invalid date</Comment>
                    <InputParameter>-1:47:38</InputParameter>
                </Example>
                <Example>
                    <Comment>Invalid date</Comment>
                    <InputParameter>11:47:AA</InputParameter>
                </Example>
                <Example>
                    <Comment>Invalid delimiters</Comment>
                    <InputParameter>11 47 38</InputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="36">
            <Name>DateTime.Transform2FTIDate</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function converts a date/time-formatted string into FTI date/time format (MM-DD-YYYY HH:MM:SS [AM,PM]).

The format-string uses the following characters
 YYYY	for 4 digit years
 MM	for 2 digit month
 DD	for 2 digit days
 hh	for 2 digit hours
 mm	for 2 digit minutes
 ss	for 2 digit seconds
Any other character can be used for unspecified input data that is ignored by the mapper engine.
 
Note: The format characters are case sensitive; 2 digit years and 1 digit days, month,... are not supported by this format specification.</Description>
            <ShortDescription>Converts a date/time-formatted string into FTI date/time format.</ShortDescription>
            <InputParameter Datatype="String" Name="InputDate" Nullable="true" Relevance="2">
                <Description>The input date time string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>The input format string</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The formatted input string. If InputDate is empty, an empty string is returned</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>01/01/2001 11:13:50 AM</InputParameter>
                    <InputParameter>MM/DD/YYYY hh:mm:ss XM</InputParameter>
                    <OutputParameter>01-01-2001 11:13:50 AM</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="308">
            <Name>DateTime.Transform2FTTimeStamp</Name>
            <MapperVersion from="8.7.0.01"/>
            <Description>This function converts a time stamp formatted string into FTI TimeStamp format (MM-DD-YYYY HH:MM:SS.f [AM,PM]).

The format-string uses the following characters
 YYYY	for 4 digit years
 MM	for 2 digit month
 DD	for 2 digit days
 hh	for 2 digit hours
 mm	for 2 digit minutes
 ss	for 2 digit seconds
 f  for less than or equal to 6 digits microseconds
Any other character can be used for unspecified input data that is ignored by the Translator.
 
Note: The format characters are case sensitive; 2 digit years and 1 digit days, month,... are not supported by this format specification.</Description>
            <ShortDescription>Converts a timestamp formatted string into FTI TimeStamp format.</ShortDescription>
            <InputParameter Datatype="String" Name="InputTimeStamp" Nullable="true" Relevance="2">
                <Description>The input timestamp string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="3">
                <Description>The input format string</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The formatted input string. If InputTimeStamp is empty, an empty string is returned</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>01/01/2001 11:13:50.568972 AM</InputParameter>
                    <InputParameter>MM/DD/YYYY hh:mm:ss.f XM</InputParameter>
                    <OutputParameter>01-01-2001 11:13:50.568972 AM</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>01/01/2001 11:13:50. AM</InputParameter>
                    <InputParameter>MM/DD/YYYY hh:mm:ss.f XM</InputParameter>
                    <OutputParameter>01-01-2001 11:13:50.0 AM</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="8">
            <Name>DateTime.FormatDateTime</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function is used to format a given date and time string to FTI-REAL format (MM-DD-YYYY HH:MM:SS [AM,PM]).
Format string to use:
The format-string uses the following characters
 YYYY for 4 digit years
 MM   for 2 digit month
 DD   for 2 digit days
 hh   for 2 digit hours
 mm   for 2 digit minutes
 ss   for 2 digit seconds
Any other character can be used for unspecified input data that is ignored by the mapper engine.
Note: The format characters are case sensitive; 2 digit years and 1 digit days,month,... are not supported by this format specification.
Do not confuse &quot;FormatDateTime&quot; and &quot;ReformatDateTime&quot; (@170, 3 parameters).</Description>
            <ShortDescription>Formats a given date and time string to FTI-REAL format</ShortDescription>
            <InputParameter Datatype="String" Name="InputDateTime" Nullable="true" Relevance="2">
                <Description>The date/time-formatted string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the date/time-formatted string. Example: YYYYMMDDhhmmss. Note this format string is case sensitive. Characters other than Y, M, D, h, m, and s are ignored by the mapper engine.</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The input date/time in FTI-REAL date/time format</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>19.10.2000-08:56:10</InputParameter>
                    <InputParameter>DD.MM.YYYY-hh:mm:ss</InputParameter>
                    <OutputParameter>2000-10-19-08.56.10.000000</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>09.10.2002-08:56:10</InputParameter>
                    <InputParameter>MM.DD.YYYY-hh:mm:ss</InputParameter>
                    <OutputParameter>2002-09-10-08.56.10.000000</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="7">
            <Name>DateTime.RealTimeStamp</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Replaced by new function DateTime.Now</Obsolete>
            </MapperVersion>
            <Description>RealTimeStamp returns the actual system date/time in the format YYYY-MM-DD-hh.mm.ss.ffffff
Should be replaced by the new function Now()</Description>
            <OutputParameter Datatype="String">
                <Description>The actual system date/time in FTI-REAL format: YYYY-MM-DD-hh.mm.ss.ffffff</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <OutputParameter>2002-06-21-09.38.05.000000</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="170">
            <Name>DateTime.ReformatDateTime</Name>
            <MapperVersion from="2.0.0.6"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function reformats a date/time input string.</Description>
            <InputParameter Datatype="String" Name="InputDateTimeString" Nullable="true" Relevance="2">
                <Description>The date/time value to format</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the InputDateTimeString</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="OutputFormat" Nullable="false" Relevance="2">
                <Description>The desired format for the date/time value.</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The reformatted date/time string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-09-2002 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <InputParameter>%h-%i-%s</InputParameter>
                    <OutputParameter>10-23-50</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10-09-2002 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <InputParameter>%d-%m-%y %h-%i-%s</InputParameter>
                    <OutputParameter>10-09-2002 10-23-50</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="315">
            <Name>DateTime.GetDayOfWeek</Name>
            <MapperVersion from="8.7.2.09"/>
            <Description>This function can be used to parse the given Date and Time and return short name of a day in a week</Description>
            <InputParameter Datatype="String" Name="InputDateTimeString" Nullable="true" Relevance="2">
                <Description>The date/time value to format</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the InputDateTimeString</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Short name of the day in a week.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-11-2020 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <OutputParameter>Tue</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>14-11-2020 23:59:59</InputParameter>
                    <InputParameter>%d-%m-%y %H:%I:%S</InputParameter>
                    <OutputParameter>Sat</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="316">
            <Name>DateTime.IsWeekEnd</Name>
            <MapperVersion from="8.7.2.09"/>
            <Description>This function parses input data and returns true if it is a weekend.</Description>
            <InputParameter Datatype="String" Name="InputDateTimeString" Nullable="true" Relevance="2">
                <Description>The date/time value to format</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the InputDateTimeString</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if given date is weekend, false otherwise.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-11-2020 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>14-11-2020 23:59:59</InputParameter>
                    <InputParameter>%d-%m-%y %H:%I:%S</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="317">
            <Name>DateTime.IsLeapYear</Name>
            <MapperVersion from="8.7.2.09"/>
            <Description>This function parses input data and returns true if it is a weekend.</Description>
            <InputParameter Datatype="Any" Name="InputDateTimeOrYear" Nullable="true" Relevance="2">
                <Description>The date/time value or integer year</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if given date is leap year, false otherwise.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-11-2020 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>14-11-2020 23:59:59</InputParameter>
                    <InputParameter>%d-%m-%y %H:%I:%S</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>		
        <Function Type="Simple" FunctionNumber="312">
            <Name>DateTime.ReformatTimeStamp</Name>
            <MapperVersion from="8.7.0.01"/>
            <Description>This function reformats a timestamp input string. This function can be used to extract TimeStamp value from a Date Time string in UTC format.</Description>
            <InputParameter Datatype="String" Name="InputTimeStampString" Nullable="true" Relevance="2">
                <Description>The timestamp value to format</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the InputTimeStampString</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="OutputFormat" Nullable="false" Relevance="2">
                <Description>The desired format for the timestamp value.</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The reformatted timestamp string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-07-2017 10:23:50.123456</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s.%f</InputParameter>
                    <InputParameter>%h-%i-%s-%f</InputParameter>
                    <OutputParameter>10-23-50-123456</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>06-23-2017 01:25:30.12345 AM</InputParameter>
                    <InputParameter>%M-%D-%Y %H:%I:%S.%f XM</InputParameter>
                    <InputParameter>%D-%M-%Y %H:%I:%S.%f %A </InputParameter>
                    <OutputParameter>23-06-2017 01:25:30.12345 AM</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2017-11-20T13:00:15.500000Z</InputParameter>
                    <InputParameter>YYYY-MM-DDThh:mm:ss.fZ</InputParameter>
                    <InputParameter>%D-%M-%Y %H:%I:%S.%f %A </InputParameter>
                    <OutputParameter>20-11-2017 01:00:15.500000 PM</OutputParameter>
                </Example>				
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="313">
            <Name>DateTime.IsUTCTimeStamp</Name>
            <MapperVersion from="8.7.0.01"/>
            <Description>This function returns string as "UTC" if the input value of the TimeStamp vendor field is in ISO 8601 UTC format.</Description>
            <InputParameter Datatype="Any" Name="InputTimeStamp" Nullable="true" Relevance="2">
                <Description>The timestamp vendor field</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>UTC if input was in ISO 8601 UTC format</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-07-2017 10:23:50.123456</InputParameter>
                    <OutputParameter></OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2017-11-20T13:00:15.500000Z</InputParameter>
                    <OutputParameter>UTC</OutputParameter>
                </Example>				
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="168">
            <Name>DateTime.RelativeDate</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function reformats a date input string and adds/subtracts the given number of days.</Description>
            <InputParameter Datatype="String" Name="InputDateString" Nullable="false" Relevance="3">
                <Description>The date to format and change</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the InputDateString</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="OutputFormat" Nullable="false" Relevance="3">
                <Description>The format that the date string should have after the calculation</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="OffsetOfDays" Nullable="false" Relevance="3">
                <Description>The number of days that should be added or (if the value is negative) subtracted</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The reformatted date/time result string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-09-2002</InputParameter>
                    <InputParameter>%d-%m-%y</InputParameter>
                    <InputParameter>%m/%d/%y</InputParameter>
                    <InputParameter>10</InputParameter>
                    <OutputParameter>09/20/2002</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10-09-2002</InputParameter>
                    <InputParameter>%d-%m-%y</InputParameter>
                    <InputParameter>%m/%d/%y</InputParameter>
                    <InputParameter>-5</InputParameter>
                    <OutputParameter>09/05/2002</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="169">
            <Name>DateTime.RelativeTime</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function reformats a date input string and adds or subtracts the given number of seconds .</Description>
            <InputParameter Datatype="String" Name="InputDateString" Nullable="false" Relevance="3">
                <Description>The date/time string to format and change</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormat" Nullable="false" Relevance="3">
                <Description>The format of the InputDateString</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="OutputFormat" Nullable="false" Relevance="3">
                <Description>The format that the date string should have after the calculation</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="OffsetInSeconds" Nullable="false" Relevance="3">
                <Description>The number of seconds that should be added or (if the value is negative) subtracted.</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The reformatted date/time result string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10-09-2002 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <InputParameter>%d %h-%i-%s</InputParameter>
                    <InputParameter>30</InputParameter>
                    <OutputParameter>10 10-24-20</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10-09-2002 10:23:50</InputParameter>
                    <InputParameter>%d-%m-%y %h:%i:%s</InputParameter>
                    <InputParameter>%d %h-%i-%s</InputParameter>
                    <InputParameter>-20</InputParameter>
                    <OutputParameter>10 10-23-30</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="18">
            <Name>DateTime.ShortDate</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Should be replaced by function DateTime.Date2String</Obsolete>
            </MapperVersion>
            <Description>This function transforms a date of format YYYYMMDD (for example: 20010120) to a date with the format MMDD (for example: 0120). Note that the function does not check the validity of the given date.</Description>
            <InputParameter Datatype="String" Name="LongDate" Nullable="false" Relevance="2">
                <Description>The date to be formatted</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The formatted date string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>20010120</InputParameter>
                    <OutputParameter>0120</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="17">
            <Name>DateTime.TimeStamp</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Replaced by new function: DateTime.Now</Obsolete>
            </MapperVersion>
            <Description>This function returns the current time in FTI format (MM-DD-YYYY HH:MM:SS [AM,PM]).</Description>
            <OutputParameter Datatype="String">
                <Description>The current time in FTI format</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <OutputParameter>07-04-2017-01:34:24 PM</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="309">
            <Name>DateTime.PreciseTimeStamp</Name>
            <MapperVersion from="8.7.0.01"/>
            <Description>This function returns the current time stamp in FTI TimeStamp format (MM-DD-YYYY HH:MM:SS.f [AM,PM]).</Description>
            <OutputParameter Datatype="String">
                <Description>The current time in FTI format</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <OutputParameter>07-04-2017-01:34:24.457785 PM</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="37">
            <Name>DateTime.TransformDateTime</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Same behavior is achieved using the DateTime datatype instead of a string.</Obsolete>
            </MapperVersion>
            <Description>This function transforms a formatted date/time string to a specific output format.</Description>
            <InputParameter Datatype="String" Name="InputDateTime" Nullable="false" Relevance="2">
                <Description>A date/time string in the following format: YYYY-MM-DD-hh.mm.ss.xxxxxx</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>A date/time string in the following format: MM-DD-YYYY hh:mm:ss AM/PM</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>2001-04-30-23.20.10.919102</InputParameter>
                    <OutputParameter>04-30-2001 11:20:10 PM</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="205">
            <Name>Logical.FieldPresent</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Alias>Logical.IsNotEmpty</Alias>
            <Description>This function checks for the presence of a field value. It returns FALSE if the input parameter is empty, TRUE if the input parameter is not empty.</Description>
            <InputParameter Datatype="Any" Name="InputValue" Nullable="true" Relevance="3">
                <Description>The field to check</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if InputValue is not empty
False if InputValue is empty</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>VALUE</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter/>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="34" VariableInput="true">
            <Name>Logical.AllHaveValue</Name>
            <MapperVersion from="1.0"/>
            <Description>This function confirms that none of the given parameters is empty (that all strings have a value).</Description>
            <InputParameter Name="ValueToCheck" Datatype="Any" Nullable="true" ParameterIsList="true">
                <Description>A list of values to check</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if all parameters have a value</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>&quot;Hello&quot;, 1234</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>&quot;sdf&quot;, &quot;&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="187">
            <Name>Logical.IsDiscarded</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function checks whether or not an input field has been discarded due to the values specified in the &quot;Null identifiers&quot; (N.A., N/A, NULL, etc.) as defined in the MSF file. The null identifiers can be defined in the MappingComposer Format/Settings dialog (see also Empty field values).</Description>
            <ShortDescription>Reports whether a given value has been discarded.</ShortDescription>
            <InputParameter Datatype="Any" Name="InputField" Nullable="true" Relevance="3">
                <Description>The fieldname, which has to be checked whether or not it has been discarded</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the field was discarded</Description>
            </OutputParameter>
            <Examples>
                <Description>Assume the following NullIdentifiers: &quot;N.A.;&lt;NULL&gt;&quot;</Description>
                <Example>
                    <InputParameter>MATURITY</InputParameter>
                    <InputParameter>N.A.</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>MATURITY</InputParameter>
                    <InputParameter>20101231</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="29" VariableInput="true">
            <Name>String.IsValid</Name>
            <MapperVersion from="1.0" to="2.3.0.1"/>
            <MapperVersion from="6.1">
                <Obsolete>This function should be replaced with OneHasValue, which supports all datatypes.</Obsolete>
            </MapperVersion>
            <Description>This function reports whether one or more strings in a list contain a value; i.e., that at least one of the strings is not empty. This is the same as the OneHasValue function but for strings only.</Description>
            <InputParameter Name="ValueToCheck" Datatype="String" Nullable="true" ParameterIsList="true">
                <Description>A list of string values</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if one or more strings are not empty
False if all input strings are empty</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>&quot;Hello,&quot;&quot;,&quot;my&quot;,&quot;strings&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="303">
            <Name>String.ValidateExpression</Name>
            <MapperVersion from="1.0"/>
            <Description>This function reports whether given string satisfies the regular expression.</Description>
            <InputParameter Name="ValueToCheck" Datatype="String" Nullable="false">
                <Description>Input string to check against regular expression.</Description>
            </InputParameter>
            <InputParameter Name="RegularExpression" Datatype="String" Nullable="false">
                <Description>An regular expression which will define a valid pattern of input string.</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if given string satisfies regular expression. false otherwise.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>|H234J|J11J|1SDS0|</InputParameter>
					<InputParameter>\|([0-9A-Z]+\|)+</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>|ACD-9KK|DDD6:|7;YY|</InputParameter>
					<InputParameter>\|(([0-9]*[A-Z]*)+\|)+</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>            
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="33" VariableInput="true">
            <Name>Logical.OneHasValue</Name>
            <MapperVersion from="1.0"/>
            <Description>This function reports whether at least one of a list of input parameters contains a value; i.e., that at least one parameter is not empty. OneHasValue should be used in place of IsValid.</Description>
            <InputParameter Name="ValueToCheck" Datatype="Any" Nullable="true" ParameterIsList="true" Relevance="3">
                <Description>A list of values</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if at least one parameter is not empty
False if all parameters are empty</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Hallo, &quot;&quot;</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>&quot;&quot;,&quot;&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="304" VariableInput="true">
            <Name>Logical.IsFieldDeleted</Name>
            <MapperVersion from="8.6"/>
            <Description>This function reports whether value of at least one input vendor fields from a list of input parameters matches delete pattern.</Description>
            <InputParameter Datatype="Any" Name="Field" Nullable="true" Relevance="3" ParameterIsList="true">
                <Description>Vendor field</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if value of any vendor field matches pattern defined in input layout, false otherwise.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. If value in VendorField2 matches delete pattern.</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. Delete pattern does not match value in any field.</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="305"  VariableInput="true">
            <Name>Logical.AllFieldsDeleted</Name>
            <MapperVersion from="8.6"/>
            <Description>This function reports whether all input fields in a list of input parameters is deleted based on delete pattern defined in the layout.</Description>
            <InputParameter Datatype="Any" Name="Field" Nullable="true" Relevance="3" ParameterIsList="true">
                <Description>Vendor fields</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if value of all fields matches delete pattern defined in input layout.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. Value in all 3 Vendor fields matches delete pattern.</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. Value in VendorField2 does not matches delete pattern.</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>	
        <Function Type="Simple" FunctionNumber="306">
            <Name>Logical.SendNullFlag</Name>
            <MapperVersion from="8.6"/>
            <Description>This function send NULL value in translated message.</Description>
            <OutputParameter Datatype="Boolean">
                <Description>NULL value.</Description>
            </OutputParameter>
        </Function>	
        <Function Type="Simple" FunctionNumber="314">
            <Name>Logical.SendEmptyString</Name>
            <MapperVersion from="8.7.2"/>
            <Description>This function send's empty string value in translated message, useful in JSON outbound mapping.</Description>
            <OutputParameter Datatype="String">
                <Description>Empty string value.</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="307" VariableInput="true">
            <Name>Logical.OneHasValueOrFieldDeleted</Name>
            <MapperVersion from="8.6"/>
            <Description>This function reports whether value of at least one input vendor fields from a list of input parameters matches delete pattern or is not empty.</Description>
            <InputParameter Datatype="Any" Name="Field" Nullable="true" Relevance="3" ParameterIsList="true">
                <Description>Vendor field</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if value of any vendor field matches pattern defined in input layout or is not empty, false otherwise.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. If value in VendorField2 matches delete pattern.</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. if any of the vendor field holds some value or is not empty this function will return true even if none of the 3 vendor field matches delete pattern.</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>                
                <Example>
                    <InputParameter>VendorField1, VendorField2 and VendorField3. Delete pattern does not match value in any field.</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>        		
        <Function Type="Simple" FunctionNumber="204" VariableInput="true">
            <Name>String.TakeFirst</Name>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function searches a list of parameters and returns the first parameter that is not empty. If all parameters are empty, TakeFirst returns nothing.</Description>
            <InputParameter Datatype="Any" Name="Field" Nullable="true" ParameterIsList="true">
                <Description>A list of values</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>This function searches a list of parameters and returns the first parameter that is not empty.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <Comment>&quot;&quot;,&quot;&quot;,&quot;one&quot;,&quot;&quot;,&quot;two&quot;</Comment>
                    <OutputParameter>one</OutputParameter>
                </Example>
                <Example>
                    <Comment>&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;</Comment>
                    <OutputParameter>&quot;&quot;</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="25" ComposerOperand="AND" Operand="CONDITIONAL_AND">
            <Name>Logical.And</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs a Boolean AND operation.</Description>
            <InputParameter Name="First Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if both parameters are true; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>true</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>false</InputParameter>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="FlowOperator" FunctionNumber="15">
            <Name>Logical.If</Name>
            <MapperVersion from="1.0"/>
            <Description>Performs a Boolean If operation.
Note: The if function returns only one parameter, however both branches of an If statement are executed (because Message Mapper uses a stack-implemented execution engine internally). This is an important consideration when the IfTrue or IfFalse parameters contain functions that may have side effects.</Description>
            <ShortDescription>Performs a Boolean If operation</ShortDescription>
            <InputParameter Name="Condition" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <InputParameter Name="IfTrue" Datatype="Any" Nullable="true" Relevance="1">
                <Description>The part of the if function which will be pushed on the stack if the first parameter (BoolVal) is TRUE</Description>
            </InputParameter>
            <InputParameter Name="IfFalse" Datatype="Any" Nullable="true" Relevance="1">
                <Description>The part of the if function which will be pushed on the stack if the first parameter (BoolVal) is FALSE</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>Either the IfTrue parameter or the IfFalse parameter depending on the evaluation of Condition.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>&quot;StringValue for True&quot;</InputParameter>
                    <InputParameter>&quot;StringValue for False&quot;</InputParameter>
                    <OutputParameter>&quot;StringValue for True&quot;</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>false</InputParameter>
                    <InputParameter>&quot;StringValue for True&quot;</InputParameter>
                    <InputParameter>&quot;StringValue for False&quot;</InputParameter>
                    <OutputParameter>&quot;StringValue for False&quot;</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="unaryOperator" FunctionNumber="28" Operand="NOT">
            <Name>Logical.Not</Name>
            <MapperVersion from="1.0"/>
            <Description>Performs a Boolean NOT operation.</Description>
            <InputParameter Name="Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the parameter was false</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>true</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="26" ComposerOperand="OR" Operand="CONDITIONAL_OR">
            <Name>Logical.Or</Name>
            <MapperVersion from="1.0"/>
            <Description>Performs a Boolean OR operation.</Description>
            <InputParameter Name="First Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if one of the parameters is true. Otherwise false</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>true</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>false</InputParameter>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="27" ComposerOperand="XOR">
            <Name>Logical.XOr</Name>
            <MapperVersion from="1.0"/>
            <Description>Performs a Boolean XOR operation.</Description>
            <InputParameter Name="First Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>A parameter of type Boolean, which can be the result of an expression</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the two parameters are different</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>true</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>false</InputParameter>
                    <InputParameter>false</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="300" obsolete="8.1.0.1">
            <!-- Flow Operator? -->
            <Name>Loops.BeginWhile</Name>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function marks the beginning of a While loop. It requires two input parameters: a subrecord type to loop through and the return value of a condition. If the condition is true, BeginWhile loops over the specified subrecords. If no subrecord of the specified type is found or if the condition is false, the BeginWhile loop is not executed and execution jumps to the end of the While loop block (see EndWhile). BeginWhile takes care of all required initializations before entering the loop to get the specified subrecord type into scope. BeginWhile is also used internally by the Fidelity loop functions (SeqLoop, PrefLoop and TermsLoop).
.</Description>
            <ShortDescription>Marks the beginning of a While loop and defines the subrecord type to loop over</ShortDescription>
            <InputParameter Datatype="Boolean" Name="Condition" Nullable="false" Relevance="3">
                <Description>The return value of a condition</Description>
            </InputParameter>
            <InputParameter Datatype="SubRecord" Name="Sub record type" Nullable="true" Relevance="3">
                <Description>The sub record type</Description>
            </InputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="301" obsolete="8.1.0.1">
            <!-- Flow Operator? -->
            <Name>Loops.EndWhile</Name>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function marks the end of a While loop block. It also reports whether another subrecord of the specified type is present (see BeginWhile). If a subrecord of the given type is found, execution jumps back to the beginning of the loop (BeginWhile). Otherwise execution resumes with the next line following the loop block.
Note: For backward compatibility, the EndWhile function can be omitted in the MSF file (although the &quot;ENDWHILE&quot; tag must be present). In this case, Message Mapper automatically inserts the function.</Description>
            <ShortDescription>Marks the end of a while loop, jumps back to related WHILE function</ShortDescription>
        </Function>
        <Function Type="Simple" FunctionNumber="302" obsolete="8.1.0.1">
            <Name>Loops.While</Name>
            <MapperVersion from="7.3.2.3"/>
            <Description>This function implements a while loop that allows sorting of subrecord. It requires four input parameters: a subrecord type to loop through, the return value of a condition, an return value of a sorting parameter (often the value of a certain input field of the current subrecord) and finally the sorting order (ascending descending). Apart from the sorting feature the function works exactly the same way as the BeginWihle function.</Description>
            <ShortDescription>Marks the beginning of a While loop and defines the subrecord type to loop over and a sorting parameter</ShortDescription>
            <InputParameter Datatype="Boolean" Name="Condition" Nullable="false" Relevance="3">
                <Description>The return value of a condition</Description>
            </InputParameter>
            <InputParameter Datatype="SubRecord" Name="Sub record type" Nullable="true" Relevance="3">
                <Description>The sub record type</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Sorting order" Nullable="true" Relevance="3">
                <Description>Values by which the current sub records have to be sorted by</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Sorting direction" Nullable="true" Relevance="3">
                <Description>Sort ASCending or DESCending</Description>
            </InputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="86">
            <Name>Loops.GetLoopCounter</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function returns the loop counter.</Description>
            <OutputParameter Datatype="Integer">
                <Description>The loop counter</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="88">
            <Name>Loops.GetCurrentContext</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function returns the type of current active subrecord.</Description>
            <OutputParameter Datatype="String">
                <Description>The sub record type</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="87">
            <Name>Loops.CountSubRecords</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function finds the subrecords of specified type and counts their occurrences, which is equal to the number of loop entries.</Description>
            <InputParameter Datatype="SubRecord" Name="subrecord type" Nullable="false" Relevance="3">
                <Description>The sub record type</Description>
            </InputParameter>
            <OutputParameter Datatype="Integer">
                <Description>The number of records found</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="198">
            <Name>Loops.GetFieldFromPreviousContext</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function retrieves and returns the value of a specified field from the previous iteration of the current loop. Use GetFieldFromPreviousContext to access a field value outside the current scope. This function must be used in a loop; otherwise it produces an error.</Description>
            <ShortDescription>Retrieves and returns the value of a specified field from the previous iteration of the current loop.</ShortDescription>
            <InputParameter Datatype="Any" Name="Field" Nullable="true" InputField="true" Relevance="1">
                <Description>The field which should be retrieved</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>The field value from the previous loop iteration</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="89">
            <Name>Loops.GetFieldFromContext</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function accesses fields in parallel records.</Description>
            <InputParameter Datatype="SubRecord" Name="Context" Nullable="true" InputField="false" Relevance="3">
                <Description>The common parent of the current record and the desired field</Description>
            </InputParameter>
            <InputParameter Datatype="Any" Name="Field" Nullable="true" InputField="true" Relevance="1">
                <Description>The field to be retrieved</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>The field value</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="197">
            <Name>Loops.GetNextIterationNumber</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function retrieves and returns the value of a specified field with a numeric datatype from the next iteration of the current loop. Use GetNextIterationNumber to access a numeric field value outside the current scope. This function must be used in a loop; otherwise it produces empty integer.</Description>
            <ShortDescription>Retrieves and returns the numeric value of the next subrecord identified by the column name</ShortDescription>
            <InputParameter Datatype="String" Name="FieldName" Nullable="false" Relevance="3">
                <Description>The name of the numeric field to retrieve</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>The value of the field in the next loop iteration or an empty integer if called outside a loop function</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="196">
            <Name>Loops.GetNextIterationString</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function retrieves and returns the value of a specified field with a string datatype from the next iteration of the current loop. Use GetNextIterationString to access a string field value outside the current scope. This function must be used in a loop; otherwise it produces empty string.</Description>
            <ShortDescription>Retrieves and returns the next string value of the next subrecord identified by the column name</ShortDescription>
            <InputParameter Datatype="String" Name="FieldName" Nullable="false" Relevance="3">
                <Description>The name of the string field to retrieve</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The value of the field in the next loop iteration or an empty string if called outside a loop function</Description>
            </OutputParameter>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="1" ComposerOperand="+" Operand="PLUS">
            <Name>Math.Add</Name>
            <MapperVersion from="1.0"/>
            <Description>This function adds two numbers.</Description>
            <InputParameter Name="First Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The first number</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The second number</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>Result value of the Add operation</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10</InputParameter>
                    <InputParameter>-5</InputParameter>
                    <OutputParameter>5</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>100.1</InputParameter>
                    <InputParameter>0.9</InputParameter>
                    <OutputParameter>101</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-10.3</InputParameter>
                    <InputParameter>10</InputParameter>
                    <OutputParameter>0.3</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="44">
            <Name>Common.Amount</Name>
            <MapperVersion from="1.1"/>
            <Description>This function determines the integer value of the given InputFloatValue using the AmountofNumber parameter, which represents the number of digits before the decimal point that are taken from InputDoubleValue. It returns the string value of the resulting integer.</Description>
            <ShortDescription>Returns the integer value of a given Float value</ShortDescription>
            <InputParameter Datatype="FloatingPoint" Name="InputFloatValue" Nullable="true" Relevance="2">
                <Description>Number</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="AmountOfNumbers" Nullable="false" Relevance="3">
                <Description>The number of integer digits.</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The determined string value or empty if the InputFloatValue is empty</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1012.31</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>101</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="164">
            <Name>Math.Ceil</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function takes one float parameter and returns the nearest greater integral number.</Description>
            <InputParameter Name="Number" Datatype="FloatingPoint" Nullable="false" Relevance="3">
                <Description>The number for calculating the ceiling</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>Result value of the Ceil operation</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="Limit">
                    <Condition>Limit for ceiling reached</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>2.8</InputParameter>
                    <OutputParameter>3</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>4.1</InputParameter>
                    <OutputParameter>5</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-3.1</InputParameter>
                    <OutputParameter>-3</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-3.8</InputParameter>
                    <OutputParameter>-3</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="45">
            <Name>Common.Decimals</Name>
            <MapperVersion from="1.1"/>
            <Description>This function determines the decimals of the given float value and returns them as a string. In the case of negative input values, it returns the signed decimal part.</Description>
            <InputParameter Datatype="FloatingPoint" Name="InputValue" Nullable="true" Relevance="2">
                <Description>-</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="DecimalsToRetrieve" Nullable="false" Relevance="3">
                <Description>-</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The decimals as string or empty if the InputValue is empty</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1.01231</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>.012</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>.0</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.01</InputParameter>
                    <InputParameter>4</InputParameter>
                    <OutputParameter>.01</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="4" ComposerOperand="/" Operand="DIVIDE">
            <Name>Math.Div</Name>
            <MapperVersion from="1.0"/>
            <Description>This function divides two numbers.</Description>
            <InputParameter Name="First Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The dividend</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The divisor</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>The quotient</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter>5</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>9</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>3</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>150</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>50</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="9" ComposerOperand="==" Operand="EQUALS">
            <Name>Logical.Equal</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs logical EQUAL between two parameters. If the datatypes of the parameters differ or one of the parameters is empty, Equal returns false.</Description>
            <InputParameter Name="First Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the two operands are equal and of the same datatype; otherwise False.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>1000</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>2000</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="10" ComposerOperand="!=" Operand="NOT_EQUALS">
            <Name>Logical.NotEqual</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs logic NOTEQUAL between two parameters. If the datatypes of the parameters differ or one of the parameters is empty, NotEqual returns False.</Description>
            <InputParameter Name="First Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the two operands are not equal values; false if they are equal values or of different datatypes</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>1000</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>2000</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="13" ComposerOperand="&gt;" Operand="GREATER">
            <Name>Logical.Greater</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs logic GREATER THAN between two parameters. If the datatypes of the parameters differ or one of the parameters is empty, this function returns False.</Description>
            <InputParameter Name="First Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the first operand is greater than the second; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>1000</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>Test2</InputParameter>
                    <InputParameter>Test</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2004-01-02</InputParameter>
                    <InputParameter>2004-01-01</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="14" ComposerOperand="&gt;=" Operand="GREATER_EQUALS">
            <Name>Logical.GreaterEqual</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs logic GREATER THAN OR EQUAL between two parameters. If the datatypes of the parameters differ or one of the parameters is empty, this function returns False.</Description>
            <InputParameter Name="First Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the first parameter is greater than or equal to the second; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>1000</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>Test2</InputParameter>
                    <InputParameter>Test</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2004-01-02</InputParameter>
                    <InputParameter>2004-01-01</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="11" ComposerOperand="&lt;" Operand="LESS">
            <Name>Logical.Less</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs logic LESS THAN between two parameters. If the datatypes of the parameters differ or one of the parameters is empty, this function returns False.</Description>
            <InputParameter Name="First Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the first parameter is less than the second; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>1000</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>Test2</InputParameter>
                    <InputParameter>Test</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2004-01-02</InputParameter>
                    <InputParameter>2004-01-01</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="12" ComposerOperand="&lt;=" Operand="LESS_EQUALS">
            <Name>Logical.LessEqual</Name>
            <MapperVersion from="1.0"/>
            <Description>This function performs logic LESS THAN OR EQUAL between two parameters. If the datatypes of the parameters differ or one of the parameters is empty, this function returns False.</Description>
            <InputParameter Name="First Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="Any" Nullable="true" Relevance="3">
                <Description>A value to test</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the first parameter is less or equal to the second; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1000</InputParameter>
                    <InputParameter>1000</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>Test2</InputParameter>
                    <InputParameter>Test</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2004-01-02</InputParameter>
                    <InputParameter>2004-01-01</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="3" ComposerOperand="*" Operand="TIMES">
            <Name>Math.Mult</Name>
            <MapperVersion from="1.0"/>
            <Description>This function multiplies two numbers.</Description>
            <InputParameter Name="First Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The first number</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The second number</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>The product of the multiplication</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10</InputParameter>
                    <InputParameter>--5</InputParameter>
                    <OutputParameter>-50</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>100.1</InputParameter>
                    <InputParameter>0.9</InputParameter>
                    <OutputParameter>90.09</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-10.3</InputParameter>
                    <InputParameter>10</InputParameter>
                    <OutputParameter>-100.3</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="165">
            <Name>Math.Floor</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function takes one float parameter and returns the nearest smaller integral number.</Description>
            <InputParameter Name="Number" Datatype="FloatingPoint" Nullable="false" Relevance="3">
                <Description>The number for calculating the floor</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>Result value of the Floor operation</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="Limit">
                    <Condition>Limit for floor reached</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>2.8</InputParameter>
                    <OutputParameter>2</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>4.1</InputParameter>
                    <OutputParameter>4</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-3.1</InputParameter>
                    <OutputParameter>-4</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-3.8</InputParameter>
                    <OutputParameter>-4</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="163">
            <Name>Math.Power</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function raises a base value (number) to a power specified by a second parameter (exponent).</Description>
            <InputParameter Name="BaseValue" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The base value</Description>
            </InputParameter>
            <InputParameter Name="Exponent" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The exponent
Note: The function accepts float types but throws a limit exception if there exists a decimal part of the number</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>The result value of the power operation</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="Limit">
                    <Condition>The second operand was not a valid integer</Condition>
                </Exception>
                <Exception Type="ParamError">
                    <Condition>0^-x. the result would be infinite</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>2</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter>4</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-2</InputParameter>
                    <InputParameter>-2</InputParameter>
                    <OutputParameter>-.25</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter>100</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="85">
            <Name>Math.Abs</Name>
            <MapperVersion from="8.1.1.1"/>
            <Description>This function calculates the absolute value of the signed input number.</Description>
            <InputParameter Name="Number" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>Signed number</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>Absolute value</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>-3</InputParameter>
                    <OutputParameter>3</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>17.4</InputParameter>
                    <OutputParameter>17.4</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-0.2</InputParameter>
                    <OutputParameter>0.2</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="166">
            <Name>Math.Round</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function rounds a specified numeric value to the precision provided by a second parameter.</Description>
            <InputParameter Name="Number" Datatype="FloatingPoint" Nullable="false" Relevance="3">
                <Description>The number to round</Description>
            </InputParameter>
            <InputParameter Name="Precision" Datatype="Integer" Nullable="false" Relevance="3">
                <Description>The precision (number of decimal places) to round</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>The result of the rounding operation</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>0.2</InputParameter>
                    <InputParameter>0</InputParameter>
                    <OutputParameter>0</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.3</InputParameter>
                    <InputParameter>0</InputParameter>
                    <OutputParameter>2</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.5</InputParameter>
                    <InputParameter>0</InputParameter>
                    <OutputParameter>2</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-1.5</InputParameter>
                    <InputParameter>0</InputParameter>
                    <OutputParameter>2</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-1.3</InputParameter>
                    <InputParameter>0</InputParameter>
                    <OutputParameter>-1</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.33</InputParameter>
                    <InputParameter>1</InputParameter>
                    <OutputParameter>1.3</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.78</InputParameter>
                    <InputParameter>1</InputParameter>
                    <OutputParameter>1.8</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-1.44</InputParameter>
                    <InputParameter>1</InputParameter>
                    <OutputParameter>-1.4</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.887</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter>1.89</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1.881</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter>1.88</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="binaryOperator" FunctionNumber="2" ComposerOperand="-" Operand="MINUS">
            <Name>Math.Sub</Name>
            <MapperVersion from="1.0"/>
            <Description>This function subtracts the second operand from the first operand.</Description>
            <InputParameter Name="First Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The first number</Description>
            </InputParameter>
            <InputParameter Name="Second Operand" Datatype="IntOrFloat" Nullable="false" Relevance="3">
                <Description>The number to subtract from FirstOperand</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>Result value of the Sub operation</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>10</InputParameter>
                    <InputParameter>--5</InputParameter>
                    <OutputParameter>15</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>100.1</InputParameter>
                    <InputParameter>0.9</InputParameter>
                    <OutputParameter>99.2</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>-10.3</InputParameter>
                    <InputParameter>10</InputParameter>
                    <OutputParameter>-20.3</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="75">
            <Name>Common.CatchError</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function reports whether the first parameter (an expression) returns an error. If so it transforms the error into a warning returns the second parameter. If the expression does not return an error, the function returns the first parameter.</Description>
            <InputParameter Datatype="Any" Name="ExpressionToCheck" Nullable="true" Relevance="1">
                <Description>The expression which should be checked for an error</Description>
            </InputParameter>
            <InputParameter Datatype="Any" Name="DefaultValue" Nullable="true" Relevance="1">
                <Description>The Value that will be pushed back if an error has occurred</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>If ExpressionToCheck returns an error the function returns DefaultValue ; otherwise ExpressionToCheck.</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="46">
            <Name>Logical.SegmentReport</Name>
            <MapperVersion from="1.1"/>
            <Description>This function takes 4 parameters (ParentExpression, ChildExpression, SegmentName, ErrorMessage) and reports a segment warning if the child segment can not be sent because of the absence of the input data of the parent segment.</Description>
            <InputParameter Name="ParentExpression" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>This parameter is an evaluated condition of a parent expression</Description>
            </InputParameter>
            <InputParameter Name="ChildExpression" Datatype="Boolean" Nullable="true" Relevance="3">
                <Description>This parameter is an evaluated condition of a child expression</Description>
            </InputParameter>
            <InputParameter Name="SegmentName" Datatype="String" Nullable="true" Relevance="1">
                <Description>This parameter describes the segment name</Description>
            </InputParameter>
            <InputParameter Name="ErrorMessage" Datatype="String" Nullable="true" Relevance="3">
                <Description>This parameter describes the error message</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>If the ParentExpression AND the ChildExpression are True, the function returns the SegmentName; otherwise it returns an empty string. Additionally a FTISegmentWarning with the SegmentName and the ErrorMessage is thrown if the ParentExpression is False and the child expression is True</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>true</InputParameter>
                    <InputParameter>true</InputParameter>
                    <InputParameter>Segment1</InputParameter>
                    <InputParameter>&quot;Segment warning text&quot;</InputParameter>
                    <OutputParameter>Segment1</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>false</InputParameter>
                    <InputParameter>true</InputParameter>
                    <InputParameter>Segment1</InputParameter>
                    <InputParameter>&quot;Segment warning text&quot;</InputParameter>
                    <OutputParameter>&quot;&quot; and an additional segment warning</OutputParameter>
                </Example>
            </Examples>
        </Function>
          <Function Type="Simple" FunctionNumber="49">
            <Name>Common.ThrowMapWarning</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function throws a user-defined Mapper warning that will be shown in exception management. You can specify two string parameter: one for Mnemonic and one for the WarningText.
Note: Message translation does not halt when this function is called.</Description>
            <InputParameter Datatype="String" Name="WarningText" Nullable="true" Relevance="3">
                <Description>Warning text or value, which caused this warning</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Mnemonic" Nullable="true" Relevance="3">
                <Description>Mnemonic for this specific warning</Description>
            </InputParameter>
			<OutputParameter Datatype="String">
                <Description>This will return the Warning Text</Description>
            </OutputParameter>
			<Examples>
			  <Example>
				<InputParameter>Mandatory Input Value Not Found</InputParameter>
				<InputParameter>INPUT DATA MISSING</InputParameter>                    
				<OutputParameter>This parameter is used by the translator internally and should not be used for logical comparisions</OutputParameter>
			  </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="50">
            <Name>Common.ThrowMapError</Name>
            <MapperVersion from="6.0.0.1"/>
            <Alias>Throw</Alias>
            <Description>This function throws an user-defined Mapper error that will be shown in exception management. You can specify two string parameters: one for Mnemonic and one for the ErrorText.
Note: Message translation halts when this function is called.</Description>
            <InputParameter Datatype="String" Name="ErrorText" Nullable="true" Relevance="3">
                <Description>Error text or value, which caused this error</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Mnemonic" Nullable="true" Relevance="3">
                <Description>Mnemonic for this specific warning</Description>
            </InputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="51">
            <Name>Common.ThrowMapValidationError</Name>
            <MapperVersion from="7.2.0.24" to="7.2.0.999"/>
            <MapperVersion from="7.3.1.1"/>
            <Alias>ThrowMapValidationError</Alias>
            <Description>This function throws an user-defined mapping error that will be shown in exception management. You can specify two string parameters: one for Mnemonic and one for the detailed error text.
Note: In contrast to ThrowMapError this function function does not halt message translation.</Description>
            <InputParameter Datatype="String" Name="ErrorText" Nullable="true" Relevance="3">
                <Description>Error text or value, which caused this error</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Mnemonic" Nullable="true" Relevance="3">
                <Description>Mnemonic for this specific error</Description>
            </InputParameter>
			<OutputParameter Datatype="String">
                <Description>This will return the Error Text</Description>
            </OutputParameter>
			<Examples>
			  <Example>
				<InputParameter>Mandatory Input Value Not Found</InputParameter>
				<InputParameter>INPUT DATA MISSING</InputParameter>                    
				<OutputParameter>This parameter is used by the translator internally and should not be used for logical comparisions</OutputParameter>
			  </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="52">
            <Name>Common.ThrowMapErrorAndContinue</Name>
            <MapperVersion from="7.2.0.24" to="7.2.0.999"/>
            <MapperVersion from="7.3.1.1"/>
            <Alias>ThrowMapErrorAndContinue</Alias>
            <Description>This function throws an user-defined mapping error that will be shown in exception management. You can specify two string parameters: one for Mnemonic and one for the detailed error text.
Note: In contrast to ThrowMapError this function function does not halt message translation.</Description>
            <InputParameter Datatype="String" Name="ErrorText" Nullable="true" Relevance="3">
                 <Description>Error text or value, which caused this error</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Mnemonic" Nullable="true" Relevance="3">
                <Description>Mnemonic for this specific error. "$" can not be used as Mnemonic</Description>
            </InputParameter>
			<OutputParameter Datatype="String">
                <Description>This will return the Error Text</Description>
            </OutputParameter>
			<Examples>
			  <Example>
				<InputParameter>Mandatory Input Value Not Found</InputParameter>
				<InputParameter>INPUT DATA MISSING</InputParameter> 
					<OutputParameter>This parameter is used by the translator internally and should not be used for logical comparisions</OutputParameter>
				</Example>
			</Examples>
		</Function>
		<Function Type="Simple" FunctionNumber="53">
			<Name>Common.ThrowError</Name>
			<MapperVersion from="6.0.0.1"/>
			<Description>This function can be used to throw user defined warning/error that will be shown in exception management. It takes the error message as first parameter the second parameter is the Severity code with which you want to raise error and
			the third parameter is the notification id with which you want to raise notification. All notification are divided in 5 catagories as explained below-
severity 10 = Successfully processed, severity 20 = processed with information, severity 30 = processed with warning, severity 40 = processed with error but message is translated and  last is severity 50 = fatal error and the message was not processed due to error.
Mentioned above is the fixed set of severities that translator can raise, but with this function you can raise a Severity 45 notification also, the value of severity should be a number less than or equal to 50 so that exception management understands it properly, any severity greater than or equal to 50 will be treated as 
Fatal error and the message translation will stop. For all cases with severity between 0 to 49 it will be treated as warning and will not stop the translation.

Similarly, there are fixed notification id's for translator i.e., Notification id = 15 and 16. ID = 15 means a Fatal error and 16 is for warning messages. With this function you can override the Notification id too by passing it as -1, then the default severity will be picked from NTDF same can be done with severity code by passing its value as -1.
			</Description>
			<InputParameter Datatype="String" Name="NotificationText" Nullable="false" Relevance="3">
				<Description>Notification text or value, which caused this event.</Description>
			</InputParameter>
			<InputParameter Datatype="Integer" Name="SeverityCode" Nullable="false" Relevance="3">
				<Description>Severity code with which the notification has to be raised.</Description>
			</InputParameter>
			<InputParameter Datatype="Integer" Name="NotificationID" Nullable="false" Relevance="3">
				<Description>Notification ID with which the notification has to be raised.</Description>
			</InputParameter>
			<OutputParameter Datatype="String">
				<Description>Blank</Description>
			</OutputParameter>
			<Examples>
 			  <Example>
					<InputParameter>This is the test notifcation.</InputParameter>
					<InputParameter>48</InputParameter>      				                   
					<InputParameter>20</InputParameter>      				                   
				    <OutputParameter>This parameter is used by the translator internally and should not be used for logical comparisons, in above example function will raise Sev 40 notification with notification id = 20.
				                     If severity code is passed as 50 then translator will treat it as an error.</OutputParameter>
			  </Example>
			  <Example>
					<InputParameter>This is error notifcation.</InputParameter>
					<InputParameter>50</InputParameter>      				                   
					<InputParameter>20</InputParameter>      				                   
				<OutputParameter>In above example function will raise Sev 50 notification.</OutputParameter>
			  </Example>			  
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="195">
            <Name>Store.GetNumericByKey</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function returns a numeric value by a key used for storage.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>The stored numeric value is retrieved by the key</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="192">
            <Name>Store.GetStringByKey</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function returns a string value by a key used for storage.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The stored string value retrieved by the key</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="101">
            <Name>Store.IncrementStore</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function adds a value to a stored numeric value: STORE + (Value). The value can be negative or positive, integer or float.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <InputParameter Datatype="IntOrFloat" Name="Value" Nullable="false" Relevance="3">
                <Description>The modifying value</Description>
                <DefaultValue>1</DefaultValue>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>The new value</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="193">
            <Name>Store.StoreNumeric</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function stores a numeric value using a key in internal memory for later access.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <InputParameter Datatype="IntOrFloat" Name="Value" Nullable="true" Relevance="3">
                <Description>The numeric value to be stored</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the value was successfully stored; otherwise False</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="194">
            <Name>Store.StoreNumericIf</Name>
            <MapperVersion from="2.1.0.4"/>
            <MapperVersion from="6.1">
                <Obsolete>The ExecutionTree makes this obsolete. Use If and StoreNumeric instead.</Obsolete>
            </MapperVersion>
            <Description>This function stores a numeric value using a key if the condition parameter is true.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <InputParameter Datatype="IntOrFloat" Name="Value" Nullable="true" Relevance="3">
                <Description>The numeric value to be stored</Description>
            </InputParameter>
            <InputParameter Datatype="Boolean" Name="Condition" Nullable="false" Relevance="3">
                <Description>The condition: if True the value is stored</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the value was successfully stored; otherwise False</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="190">
            <Name>Store.StoreString</Name>
            <MapperVersion from="2.1.0.4"/>
            <Description>This function stores a string value using a key in internal memory for later access.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Value" Nullable="true" Relevance="3">
                <Description>The string value to be stored</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the value was successfully stored; otherwise False</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="191">
            <Name>Store.StoreStringIf</Name>
            <MapperVersion from="2.1.0.4"/>
            <MapperVersion from="6.1">
                <Obsolete>The ExecutionTree makes this obsolete. use If and StoreString</Obsolete>
            </MapperVersion>
            <Description>Stores a string value with the use of a key if the condition parameter is true.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="3">
                <Description>The key by which the value can be accessed</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Value" Nullable="true" Relevance="3">
                <Description>The string value to be stored</Description>
            </InputParameter>
            <InputParameter Datatype="Boolean" Name="Condition" Nullable="false" Relevance="3">
                <Description>The condition: if True the value is stored</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the value was successfully stored; otherwise False</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="23" Operand="PLUS">
            <Name>String.Strcat</Name>
            <MapperVersion from="1.0"/>
            <Description>This function concatenates two strings.</Description>
            <InputParameter Datatype="String" Name="String1" Nullable="true" Relevance="1">
                <Description>First String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String2" Nullable="true" Relevance="1">
                <Description>Second String</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>String2 appended to String1</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>First</InputParameter>
                    <InputParameter>Last</InputParameter>
                    <OutputParameter>FirstLast</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="19">
            <Name>String.Strcmp</Name>
            <MapperVersion from="1.0"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Logical.Equal (==) makes this function obsolete</Obsolete>
            </MapperVersion>
            <Description>This function compares two strings and returns True if the strings are equal, false if they are different.</Description>
            <InputParameter Datatype="String" Name="String1" Nullable="true" Relevance="3">
                <Description>First String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String2" Nullable="true" Relevance="3">
                <Description>Second String</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if String1 and String2 are equal; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Walter</InputParameter>
                    <InputParameter>Walter</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>Gemski</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>Bernhard</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="151" VariableInput="true">
            <Name>String.StrContainsOneOf</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function reports whether a string is present as a substring of other strings.
Note: The Parameter Count includes the searchString.</Description>
            <InputParameter Datatype="String" Name="SearchString" Nullable="true">
                <Description>The substring to search for</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String List" Nullable="true" ParameterIsList="true">
                <Description>A list of the strings to search</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the search string is found; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>search</InputParameter>
                    <InputParameter>&quot;test&quot;,&quot;do&quot;,&quot;the&quot;,&quot;twist&quot;,&quot;searchitall&quot;</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>nothing</InputParameter>
                    <InputParameter>&quot;could&quot;,&quot;be&quot;,&quot;found&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="167">
            <Name>String.FormatNum</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function converts a given numeric value into a string, using a specified format string.</Description>
            <InputParameter Datatype="FloatingPoint" Name="NumericValue" Nullable="false" Relevance="2">
                <Description>The numeric value to convert</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="true" Relevance="2">
                <Description>The format which should be used with the NumericValue</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The formatted string</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="Limit">
                    <Condition>The number of the digits in FormatString must not be greater than 255</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>1234.232</InputParameter>
                    <InputParameter>Value %f</InputParameter>
                    <OutputParameter>Value 1234.232</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="152">
            <Name>String.StrGetPropertyVal</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function retrieves a value out of a given string in a keyword-value-pair string. The string from which the value is to be retrieved is the StringToSearch parameter. The Keyword, which represents a property (such as &quot;quantity&quot;), must occur in the StringToSearch, and must be associated with a value (such as the value &quot;22&quot;). The AssignmentVal parameter (such as an equal sign) must be positioned between the Keyword and the property value (&quot;quantity=22&quot;). The Delimiter is used to determine the &quot;end&quot; of the value. The return value starts at the first character that is not a delimiter character, and ends with the last character that is not a delimiter character. Delimiters are not included in the returned value. The return value preserves the upper and lower case of the original value. The Delimiter can contain multiple characters.</Description>
            <ShortDescription>Retrieves a value out of a given string in a keyword-value-pair string.</ShortDescription>
            <InputParameter Datatype="String" Name="StringToSearch" Nullable="false" Relevance="2">
                <Description>The string from which we retrieve the value</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Keyword" Nullable="false" Relevance="3">
                <Description>The name of the property to extract</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="AssignmentVal" Nullable="false" Relevance="3">
                <Description>This parameter has to be between property name and the property value. It may or may not be surrounded by characters from the delimiter character set</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Delimiter" Nullable="false" Relevance="3">
                <Description>The delimiter character or characters that mark beginning and end of a return value within StringToSearch. All characters in this parameter string are considered delimiters and do not occur in the returned string. </Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The property value (as a string); if KeyWordVal cannot be found in StringToSearch, this function returns an empty string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>TICKER=IBM, Price=104 Quantity =22</InputParameter>
                    <InputParameter>Quantity</InputParameter>
                    <InputParameter>=</InputParameter>
                    <InputParameter>,</InputParameter>
                    <OutputParameter>22</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>TICKER=IBM: Price=104; Quantity = 25</InputParameter>
                    <InputParameter>PRICE</InputParameter>
                    <InputParameter>=</InputParameter>
                    <InputParameter>,:</InputParameter>
                    <OutputParameter>104</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>TICKER=IBM: Price=104; Quantity = 25</InputParameter>
                    <InputParameter>PRICE</InputParameter>
                    <InputParameter>=</InputParameter>
                    <InputParameter>,:;</InputParameter>
                    <OutputParameter>104</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>TICKER=IBM: Price=104; Quantity = 25</InputParameter>
                    <InputParameter>PRICE</InputParameter>
                    <InputParameter>=</InputParameter>
                    <InputParameter>,:;</InputParameter>
                    <OutputParameter>104</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>TICKER=IBM: Price=104; Quantity = 25</InputParameter>
                    <InputParameter>PRICE</InputParameter>
                    <InputParameter>$</InputParameter>
                    <InputParameter>,:</InputParameter>
                    <OutputParameter>104</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="185">
            <Name>String.StrGreater</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Logical.Greater (&gt;) makes this function obsolete</Obsolete>
            </MapperVersion>
            <Description>This function reports whether the first string is greater than the second string.</Description>
            <InputParameter Datatype="String" Name="String1" Nullable="true" Relevance="3">
                <Description>First String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String2" Nullable="true" Relevance="3">
                <Description>Second String</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if String1 is greater String2 (String1&gt;String2); otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Walter</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>Walter</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="186">
            <Name>String.StrGreaterEqual</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Logical.GreaterEqual (&gt;=) makes this function obsolete</Obsolete>
            </MapperVersion>
            <Description>This function reports whether the first string is greater or equal than the second string.</Description>
            <InputParameter Datatype="String" Name="String1" Nullable="true" Relevance="3">
                <Description>First String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String2" Nullable="true" Relevance="3">
                <Description>Second String</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if String1 is greater or equal String2 (String1&gt;=String2); otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Walter</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>Walter</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="32">
            <Name>String.IsAlpha</Name>
            <MapperVersion from="1.0"/>
            <Description>This function reports whether a character or a region in a string is alphanumeric.</Description>
            <InputParameter Name="StringToCheck" Datatype="String" Nullable="true" Relevance="3">
                <Description>String to check</Description>
            </InputParameter>
            <InputParameter Name="Position" Datatype="Integer" Nullable="false" Relevance="3">
                <Description>The position of the character to check if it is alphanumeric</Description>
            </InputParameter>
            <InputParameter Name="Position2" Datatype="Integer" Nullable="false" Relevance="3">
                <Description>The optional end position. If this parameter is present a region is defined which should be checked if it is alpha-numeric</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True If the position / defined region is alphanumeric; otherwise False</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>Position2 &lt; Position1 or Position1 &gt; length of String-ToCheck or Position2 &gt; length of StringToCheck or Position1 or Position2 are 0</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>IsAlpha</InputParameter>
                    <InputParameter>1</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>IS45</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>23456</InputParameter>
                    <InputParameter>1</InputParameter>
                    <InputParameter>5</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>TEST</InputParameter>
                    <InputParameter>3</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="21">
            <Name>String.StrLeftCut</Name>
            <MapperVersion from="1.0"/>
            <Description>This function removes characters from the beginning of a string, truncating from the left at a position counted from the end of the string.</Description>
            <InputParameter Datatype="String" Name="String" Nullable="true" Relevance="2">
                <Description>String to cut</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Position" Nullable="false" Relevance="3">
                <Description>Position to cut string (counted from the end of the string)</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Substring remaining after the cut.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <InputParameter>6</InputParameter>
                    <OutputParameter>Mapper</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <InputParameter>40</InputParameter>
                    <OutputParameter>MessageMapper</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="16">
            <Name>String.StrLen</Name>
            <MapperVersion from="1.0"/>
            <Description>This function returns the number of characters in a string.</Description>
            <InputParameter Name="String" Datatype="String" Nullable="true" Relevance="3">
                <Description>String</Description>
            </InputParameter>
            <OutputParameter Datatype="Integer">
                <Description>The length of the string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Walter</InputParameter>
                    <OutputParameter>6</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>4</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>Bernhard</InputParameter>
                    <OutputParameter>8</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="183">
            <Name>String.StrLess</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Logical.Less (&lt;) makes this function obsolete</Obsolete>
            </MapperVersion>
            <Description>This function reports whether the first string is less than the second string.</Description>
            <InputParameter Datatype="String" Name="String1" Nullable="true" Relevance="3">
                <Description>First String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String2" Nullable="true" Relevance="3">
                <Description>Second String</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if String1 is less String2 (String1&lt;String2)</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Walter</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>Walter</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="184">
            <Name>String.StrLessEqual</Name>
            <MapperVersion from="2.1.0.1"/>
            <MapperVersion from="6.3.0.1">
                <Obsolete>Logical.LessEqual (&lt;=) makes this function obsolete</Obsolete>
            </MapperVersion>
            <Description>This function reports whether the first string is less or equal than the second string.</Description>
            <InputParameter Datatype="String" Name="String1" Nullable="true" Relevance="3">
                <Description>First String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="String2" Nullable="true" Relevance="3">
                <Description>Second String</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>true if String1 is less or equal String2 (String1&lt;=String2)</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Walter</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>Walter</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>John</InputParameter>
                    <InputParameter>John</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="31">
            <Name>String.LowerCase</Name>
            <MapperVersion from="1.0"/>
            <Alias>String.ToLower</Alias>
            <Description>This function transforms a string to all lowercase letters.</Description>
            <InputParameter Name="String" Datatype="String" Nullable="true" Relevance="2">
                <Description>The string to modify</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>String with all letters converted to lowercase.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <OutputParameter>messagemapper</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>MESSAGEMAPPER</InputParameter>
                    <OutputParameter>messagemapper</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="158" VariableInput="true">
            <Name>String.StrMakeList</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function concatenates a list of strings with the given separator and returns the string.</Description>
            <InputParameter Datatype="String" Name="Separator" Nullable="true" Relevance="2">
                <Description>One or more delimiter characters</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="ListOfStrings" Nullable="true" Relevance="2" ParameterIsList="true">
                <Description>The strings to concatenate</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The concatenated string.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>;</InputParameter>
                    <InputParameter>&quot;This&quot;,&quot;is&quot;,&quot;a&quot;</InputParameter>
                    <OutputParameter>This;is;a</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>++</InputParameter>
                    <InputParameter>&quot;Message&quot;,&quot;15&quot;</InputParameter>
                    <OutputParameter>Message++15</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="211" VariableInput="true" obsolete="8.1.0.1">
            <Name>Logical.OneOf_Obsolete</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.6"/>
            <MapperVersion from="8.1.0.1">
                <Obsolete>Use OneOf instead - Parameter order has changed.</Obsolete>
            </MapperVersion>
            <Description>This function reports whether at least one member of the a string list is equal to a specified string.</Description>
            <InputParameter Name="StringList" Datatype="String" Nullable="true" ParameterIsList="true">
                <Description>A list of string values</Description>
            </InputParameter>
            <InputParameter Name="SearchString" Datatype="String" Nullable="true">
                <Description>The string value to search for</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if SearchString is equal to one item in StringList; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>&quot;SEPP&quot;,&quot;MICHAEL&quot;,&quot;SEPP&quot;</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>&quot;SEPP&quot;,&quot;MICHAEL&quot;,&quot;JOSEF&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="112" VariableInput="true">
            <Name>Logical.OneOf</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function reports whether at least one member of the a string list is equal to a specified string.</Description>
            <InputParameter Name="SearchString" Datatype="String" Nullable="true">
                <Description>The string value to search for</Description>
            </InputParameter>
            <InputParameter Name="StringList" Datatype="String" Nullable="true" ParameterIsList="true">
                <Description>A list of string values</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if SearchString is equal to one item in StringList; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>&quot;SEPP&quot;,&quot;MICHAEL&quot;,&quot;SEPP&quot;</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>&quot;SEPP&quot;,&quot;MICHAEL&quot;,&quot;JOSEF&quot;</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="156">
            <Name>String.StrPadLeft</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function adds specified characters to the left hand end of a string, until the given length is reached. If the length of string (parameter 1) is greater than the specified length (parameter 2), the string is not changed.</Description>
            <InputParameter Datatype="String" Name="String" Nullable="true" Relevance="1">
                <Description>String to pad</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Length" Nullable="true" Relevance="3">
                <Description>Length of the resultstring</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="PadChar" Nullable="true" Relevance="1">
                <Description>Character for padding</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Left-padded string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>string</InputParameter>
                    <InputParameter>10</InputParameter>
                    <InputParameter>.</InputParameter>
                    <OutputParameter>....string</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>string</InputParameter>
                    <InputParameter>1</InputParameter>
                    <InputParameter>.</InputParameter>
                    <OutputParameter>string</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>string</InputParameter>
                    <InputParameter>0</InputParameter>
                    <InputParameter>.</InputParameter>
                    <OutputParameter>string</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>123</InputParameter>
                    <InputParameter>6</InputParameter>
                    <InputParameter>*</InputParameter>
                    <OutputParameter>***123</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>123456</InputParameter>
                    <InputParameter>6</InputParameter>
                    <InputParameter>*</InputParameter>
                    <OutputParameter>123456</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="157">
            <Name>String.StrPadRight</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function adds specified characters to the right end of a string, until the given length is reached. f the length of string (parameter 1) is greater than the specified length (parameter 2), the string is not changed.</Description>
            <InputParameter Datatype="String" Name="String" Nullable="true" Relevance="1">
                <Description>String to pad</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Length" Nullable="true" Relevance="3">
                <Description>Length of the resultstring</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="PadChar" Nullable="true" Relevance="1">
                <Description>Character for padding</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Right-padded string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>string</InputParameter>
                    <InputParameter>10</InputParameter>
                    <InputParameter>.</InputParameter>
                    <OutputParameter>String...</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>string</InputParameter>
                    <InputParameter>1</InputParameter>
                    <InputParameter>.</InputParameter>
                    <OutputParameter>string</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>string</InputParameter>
                    <InputParameter>0</InputParameter>
                    <InputParameter>.</InputParameter>
                    <OutputParameter>string</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>123</InputParameter>
                    <InputParameter>6</InputParameter>
                    <InputParameter>*</InputParameter>
                    <OutputParameter>123***</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>123456</InputParameter>
                    <InputParameter>6</InputParameter>
                    <InputParameter>*</InputParameter>
                    <OutputParameter>123456</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="161">
            <Name>String.StrParam</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function extracts one parameter from a list of string parameters, based on an index number.</Description>
            <InputParameter Datatype="String" Name="InputStringList" Nullable="true" Relevance="2">
                <Description>The list of string parameters</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="DelimiterValue" Nullable="false" Relevance="3">
                <Description>The delimiter in the parameter list</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="IndexValue" Nullable="true" Relevance="3">
                <Description>Index of the string to extract from the parameter list; if negative, the index counts to the left from the end of the string</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The parameter located by the given index</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>1*2***IBM</InputParameter>
                    <InputParameter>*</InputParameter>
                    <InputParameter>5</InputParameter>
                    <OutputParameter>IBM</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>1*2***IBM</InputParameter>
                    <InputParameter>*</InputParameter>
                    <InputParameter>-4</InputParameter>
                    <OutputParameter>2</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="38">
            <Name>String.StrRange</Name>
            <MapperVersion from="1.0"/>
            <Description>This function takes 3 strings and checks whether the first string is within the lexicographical (alphabetical or dictionary-like) range between second and third string. The function returns True if the first string is within the range; otherwise False.</Description>
            <InputParameter Name="CheckString" Datatype="String" Nullable="true" Relevance="3">
                <Description>The string to search</Description>
            </InputParameter>
            <InputParameter Name="StartString" Datatype="String" Nullable="true" Relevance="3">
                <Description>The start string of the range</Description>
            </InputParameter>
            <InputParameter Name="EndString" Datatype="String" Nullable="true" Relevance="3">
                <Description>The end string of the range</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True If the CheckString is within the specified range; otherwise False.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>CCCCC</InputParameter>
                    <InputParameter>AAAAA</InputParameter>
                    <InputParameter>FFFFF</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>ZZZZZ</InputParameter>
                    <InputParameter>AAAAA</InputParameter>
                    <InputParameter>FFFFF</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="154">
            <Name>String.StrReplace</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function replaces the first instance of a substring (Pattern) within a given string (OriginalString) by a new string (Replacement). The result is OrginalString with the replaced value.</Description>
            <InputParameter Datatype="String" Name="OriginalString" Nullable="true" Relevance="2">
                <Description>String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Pattern" Nullable="true" Relevance="3">
                <Description>String to be replaced within OriginalString</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Replacement" Nullable="true" Relevance="1">
                <Description>Replacement string for Pattern</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>OriginalString with the first instance of Pattern changed to Replacement</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>This is a test of the new mappingfunctions for messagemapping</InputParameter>
                    <InputParameter>mapping</InputParameter>
                    <InputParameter>translation</InputParameter>
                    <OutputParameter>This is a test of the new translationfunctions for messagemapping</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>This is a test of the new mappingfunctions for messagemapping</InputParameter>
                    <InputParameter>old</InputParameter>
                    <InputParameter>cool</InputParameter>
                    <OutputParameter>This is a test of the new mappingfunctions for messagemapping</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="155">
            <Name>String.StrReplaceAll</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function replaces all instances of a substring (Pattern) within a given string (OriginalString) by a new string (Replacement). The result is OrginalString with the replaced value(s).</Description>
            <InputParameter Datatype="String" Name="OriginalString" Nullable="true" Relevance="2">
                <Description>String</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Pattern" Nullable="true" Relevance="3">
                <Description>Substring to replace within OriginalString</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Replacement" Nullable="true" Relevance="1">
                <Description>Replacement string for Pattern</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>OriginalString with all instances of Pattern changed to Replacement</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>This is a test of the new mappingfunctions for messagemapping</InputParameter>
                    <InputParameter>mapping</InputParameter>
                    <InputParameter>translation</InputParameter>
                    <OutputParameter>This is a test of the new translationfunctions for messagetranslation</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>This is a test of the new mappingfunctions for messagemapping</InputParameter>
                    <InputParameter>mapping</InputParameter>
                    <InputParameter>cool</InputParameter>
                    <OutputParameter>This is a test of the new coolfunctions for messagecool</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="22">
            <Name>String.StrRightCut</Name>
            <MapperVersion from="1.0"/>
            <Description>This function removes characters from the end of a string, truncating it at a given position from the beginning of the string.</Description>
            <InputParameter Datatype="String" Name="String" Nullable="true" Relevance="2">
                <Description>String to cut</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Position" Nullable="false" Relevance="3">
                <Description>Position to cut string</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Substring remaining after the cut.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <InputParameter>6</InputParameter>
                    <OutputParameter>Message</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <InputParameter>40</InputParameter>
                    <OutputParameter>MessageMapper</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="35">
            <Name>String.StrStr</Name>
            <MapperVersion from="1.0"/>
            <Alias>String.Contains</Alias>
            <Description>This function reports whether one string is present within another string.</Description>
            <InputParameter Datatype="String" Name="MainString" Nullable="true" Relevance="3">
                <Description>The string in which to search</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="SearchString" Nullable="false" Relevance="3">
                <Description>The string to search for in MainString</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if SearchString is found in the MainString; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>This is the main string</InputParameter>
                    <InputParameter>main</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>This is the main string</InputParameter>
                    <InputParameter>are</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="153">
            <Name>String.SubString</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function extracts a substring from a string.</Description>
            <InputParameter Datatype="String" Name="String" Nullable="true" Relevance="2">
                <Description>String</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Position" Nullable="true" Relevance="3">
                <Description>Starting position of the substring to extract</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Length" Nullable="true" Relevance="3">
                <Description>Length of the substring to extract</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Extracted string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>A green car!</InputParameter>
                    <InputParameter>3</InputParameter>
                    <InputParameter>5</InputParameter>
                    <OutputParameter>green</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>A green car!</InputParameter>
                    <InputParameter>1</InputParameter>
                    <InputParameter>7</InputParameter>
                    <OutputParameter>A green</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>A green car!</InputParameter>
                    <InputParameter>9</InputParameter>
                    <InputParameter>5</InputParameter>
                    <OutputParameter>car!</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>A green car!</InputParameter>
                    <InputParameter>3</InputParameter>
                    <InputParameter>20</InputParameter>
                    <OutputParameter>green car!</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="159">
            <Name>String.StrTrimLeft</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function removes the leading blanks from a string.</Description>
            <InputParameter Datatype="String" Name="Source" Nullable="true" Relevance="2">
                <Description>String to modify</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Source string without leading blanks</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Message    Mapper</InputParameter>
                    <OutputParameter>Message    Mapper</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <OutputParameter>MessageMapper</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="160">
            <Name>String.StrTrimRight</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function removes the trailing blanks of a string.</Description>
            <InputParameter Datatype="String" Name="Source" Nullable="true" Relevance="2">
                <Description>String to modify</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Source string without trailing blanks</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>Message    Mapper</InputParameter>
                    <OutputParameter>Message    Mapper</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <OutputParameter>MessageMapper</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="30">
            <Name>String.UpperCase</Name>
            <MapperVersion from="1.0"/>
            <Alias>String.ToUpper</Alias>
            <Description>This function transforms a string to all uppercase letters.</Description>
            <InputParameter Name="String" Datatype="String" Nullable="true" Relevance="2">
                <Description>The string to modify</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>String with all letters converted to uppercase</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>MessageMapper</InputParameter>
                    <OutputParameter>MESSAGEMAPPER</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>messagemapper</InputParameter>
                    <OutputParameter>MESSAGEMAPPER</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="150">
            <Name>String.StrWord</Name>
            <MapperVersion from="1.2.1.1"/>
            <Description>This function splits a string into tokens (using one or more specified delimiters) and returns a specified token.</Description>
            <InputParameter Datatype="String" Name="String" Nullable="true" Relevance="2">
                <Description>The string to split</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Delimiters" Nullable="true" Relevance="3">
                <Description>String containing separator characters</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Position" Nullable="true" Relevance="3">
                <Description>Nth word that should be returned</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The Nth word from the string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>FTI, On Broadway, in city::NewYork</InputParameter>
                    <InputParameter>,:</InputParameter>
                    <InputParameter>2</InputParameter>
                    <OutputParameter>On</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>FTI, On Broadway, in city::NewYork</InputParameter>
                    <InputParameter>,:</InputParameter>
                    <InputParameter>-2</InputParameter>
                    <OutputParameter>city</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>FTI, On Broadway, in city::NewYork</InputParameter>
                    <InputParameter>,:</InputParameter>
                    <InputParameter>1</InputParameter>
                    <OutputParameter>FTI</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>FTI, On Broadway, in city::NewYork</InputParameter>
                    <InputParameter>,:</InputParameter>
                    <InputParameter>-1</InputParameter>
                    <OutputParameter>NewYork</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="162">
            <Name>String.StrWords</Name>
            <MapperVersion from="2.0.0.6"/>
            <Description>This function splits a string into tokens (using one or more specified delimiters) and returns a substring that includes a specified range of tokens.
Note: The StrWords function does not exclude all delimiters in the returned substring. It only removes the delimiters on the beginning and the ending of the substring.</Description>
            <ShortDescription>Splits a string into tokens (using one or more specified delimiters) and returns a substring that includes a specified range of tokens.</ShortDescription>
            <InputParameter Datatype="String" Name="StringList" Nullable="true" Relevance="2">
                <Description>The list of delimited strings</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Delimiters" Nullable="false" Relevance="3">
                <Description>String containing separator characters</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="RangeStart" Nullable="true" Relevance="3">
                <Description>The number of the token that begins the substring range</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="RangeEnd" Nullable="true" Relevance="3">
                <Description>The number of the token that ends the substring range</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The extracted substring</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>word1**word2**word3**word4**word5**word6</InputParameter>
                    <InputParameter>**</InputParameter>
                    <InputParameter>2</InputParameter>
                    <InputParameter>5</InputParameter>
                    <OutputParameter>word2**word3**word4**word5</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="175">
            <Name>Common.GetCorrelationId</Name>
            <MapperVersion from="2.1.0.1"/>
            <Description>This function returns the correlation id if one is available.</Description>
            <OutputParameter Datatype="String">
                <Description>The correlation id or an empty string (if correlation id exists)</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="172">
            <Name>Common.GetJobId</Name>
            <MapperVersion from="2.1.0.1"/>
            <Description>GetJobId retrieves the job identifier associated with the current transaction. An empty string is returned if StreetLamp is turned off</Description>
            <OutputParameter Datatype="String">
                <Description>A Job ID, if available; an empty string if StreetLamp is turned off</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <Comment>A job id, if available</Comment>
                    <OutputParameter>02169Y7J445NV00</OutputParameter>
                </Example>
                <Example>
                    <Comment>Empty string (e.g. StreetLamp turned off)</Comment>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="174">
            <Name>Common.GetJobTimeStamp</Name>
            <MapperVersion from="2.1.0.1"/>
            <Description>This function returns the start timestamp of the executed job. If there is no transaction available the start time-stamp of the application is returned</Description>
            <OutputParameter Datatype="String">
                <Description>The start timestamp</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <OutputParameter>2001-12-31-13:40:30.123456</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="173">
            <Name>Common.GetRecordNumber</Name>
            <MapperVersion from="2.1.0.1"/>
            <Alias>Common.GetMessageNumber</Alias>
            <Description>This function returns the actual record number in a looping context</Description>
            <OutputParameter Datatype="Integer">
                <Description>The actual record number</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="171">
            <Name>Common.GetTransactionId</Name>
            <MapperVersion from="2.1.0.1"/>
            <Description>GetTransactionId retrieves the transaction, which the current record is associated to. An empty string will be returned if StreetLamp is turned off</Description>
            <OutputParameter Datatype="String">
                <Description>A transaction id, if available. Returns an empty string if StreetLamp is turned off</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <Comment>A transaction id</Comment>
                    <OutputParameter>02160120177480D</OutputParameter>
                </Example>
                <Example>
                    <Comment>Empty string (e.g. StreetLamp turned off)</Comment>
                </Example>
            </Examples>
        </Function>
        <!-- new Translate function for Mapping Designer -->
        <Function Type="Simple" FunctionNumber="55" VariableInput="true" designerOnly="true">
            <Name>Translation.Translate</Name>
            <MapperVersion from="8.1.0.1">
                <Comments>Designed as replacement for translation functions in previous versions.</Comments>
            </MapperVersion>
            <Description>This function substitutes a given input value with a value stored in a translation table. If no translation value is available the function returns either the original input value or - if paramter ExactTranslate is true - an empty value.</Description>
            <ShortDescription>Substitute a given input value by a value stored in a translation table</ShortDescription>
            <InputParameter Datatype="TranslationTable" Name="TranslationTable" Nullable="false" Relevance="3">
                <Description>Specifies the translation table.</Description>
            </InputParameter>
            <InputParameter Datatype="Boolean" Name="ExactTranslate" Nullable="false" Relevance="3">
                <Description>Defines the behaviour of the function if the value could not be found in the translation table. If set to 'true' it will return an empty string in this case, the original input value otherwise.</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputValues" Nullable="true" Relevance="3" ParameterIsList="true">
                <Description>One or more input fields for the search of a corresponding result</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Translated value from translation table</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="6" obsolete="8.1.0.1">
            <Name>Translation.ExactTranslate</Name>
            <MapperVersion from="1.1">
                <Comments>If there is no translation value available the function returns an empty value.</Comments>
            </MapperVersion>
            <MapperVersion from="6.1">
                <Comments>No Error on untranslatable anymore</Comments>
            </MapperVersion>
            <Description>This function substitutes a given value with a value stored in a translation table. If no translation value is available, an empty value is returned.</Description>
            <InputParameter Datatype="String" Name="Value" Nullable="true" Relevance="3">
                <Description>The value to translate</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="TableNr" Nullable="false" Relevance="3">
                <Description>The translation table number</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The translated value if no error occurred; otherwise an empty string</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="TranslateFailed">
                    <Condition>There is no given value (Parameter Value) found in the translation table</Condition>
                </Exception>
                <Exception Type="ParamError">
                    <Condition>TableNr &gt; count of translation tables</Condition>
                </Exception>
            </Throws>
        </Function>
        <Function Type="Simple" FunctionNumber="102" obsolete="8.1.0.1">
            <Name>Translation.ExactTranslateNumber</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function substitutes a given numeric value with a value stored in the translation section of the msf file. If no translation value is available, an empty value is returned.</Description>
            <InputParameter Datatype="IntOrFloat" Name="Value" Nullable="true" Relevance="3">
                <Description>The value to translate</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="TableNr" Nullable="false" Relevance="3">
                <Description>The translation table number</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The translated value is if no error occurred; otherwise an empty string</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="TranslateFailed">
                    <Condition>There is no given value (Parameter Value) found in the translation table</Condition>
                </Exception>
                <Exception Type="ParamError">
                    <Condition>TableNr &gt; Count of translation tables</Condition>
                </Exception>
            </Throws>
        </Function>
        <Function Type="Simple" FunctionNumber="24">
            <Name>Translation.FPFormat</Name>
            <MapperVersion from="1.0"/>
            <Description>This function converts a given string into a floating-point value. The InputString is in Bloomberg FP-format, which was designed for user formats that cannot accept decimal points in floating point fields.
-	The first byte of the number designates the sign. 0 indicates a positive number and 1, a negative number.
-	The two bytes following the sign byte designate the number of decimal places in the number.
-	The rest of the field, after the sign byte and the number of decimal points, contains the digits of the number (the whole number and the decimal places).</Description>
            <ShortDescription>Generates a float value out of Bloomberg FP-Format</ShortDescription>
            <InputParameter Datatype="String" Name="InputString" Nullable="false" Relevance="2">
                <Description>The input string which should be converted into a double value</Description>
            </InputParameter>
            <OutputParameter Datatype="FloatingPoint">
                <Description>The return value is the converted input string which was in the FP-format</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>- InputString must have at least the length 3
- The first character of the InputString parameter must have the value &quot;0&quot; or &quot;1&quot;</Condition>
                </Exception>
                <Exception Type="NotANumber">
                    <Condition>Each character of the InputString parameter must be a digit</Condition>
                </Exception>
                <Exception Type="PrecisionLimit">
                    <Condition>Number of decimal values &gt; 15</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>10000908</InputParameter>
                    <OutputParameter>-908</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>00200908</InputParameter>
                    <OutputParameter>9.08</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>20000908</InputParameter>
                    <OutputParameter>A PARAMERR is thrown</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>10600908</InputParameter>
                    <OutputParameter>-0.000908</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>11600908</InputParameter>
                    <OutputParameter>A PRECISION_LIMIT error is thrown because the count of decimal values is greater than 15</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="5" obsolete="8.1.0.1">
            <Name>Translation.TranslateString</Name>
            <MapperVersion from="1.0"/>
            <Description>This function substitutes a given string value with a value stored in the translation section of the msf file. If no translation value is available, the original value is returned.</Description>
            <InputParameter Datatype="String" Name="Value" Nullable="true" Relevance="3">
                <Description>The value to translate</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="TableNr" Nullable="false" Relevance="3">
                <Description>The translation table number</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The translated value if no error occurred; otherwise the original value</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>TableNr &gt; count of translation tables</Condition>
                </Exception>
            </Throws>
        </Function>
        <Function Type="Simple" FunctionNumber="103" obsolete="8.1.0.1">
            <Name>Translation.TranslateNumber</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function substitutes a given numeric value with a value stored in the translation section of the msf file. If no translation value is available, the original value is returned.</Description>
            <InputParameter Datatype="IntOrFloat" Name="Value" Nullable="true" Relevance="3">
                <Description>The value to translate</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="TableNr" Nullable="false" Relevance="3">
                <Description>The translation table number</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The translated value if no error occurred; otherwise the original value</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>TableNr &gt; count of translation tables</Condition>
                </Exception>
            </Throws>
        </Function>
        <Function Type="FlowOperator" FunctionNumber="78" VariableInput="true">
            <Name>Logical.SwitchCase</Name>
            <MapperVersion from="6.1.0.1"/>
            <Description>This function is a conditional flow control, a &quot;switch case.&quot; It evaluates a SwitchValue (parameter 1), then searches for a matching Key in a list of Key-Value pairs. If the SwitchValue matches a Key, the function returns the associated Value. If a matching Key is not found, the DefaultValue (parameter 2) is returned.

switch (switchValue)
{
	case Key1: Value1;
	case Key2: Value2;
}

if it cannot find the key it returns the default value.

switch (&quot;Mike&quot;)
{
switch (switchValue)
{
	case Key1: Value1;
	case Key2: Value2;
    default: defaultValue;
}
}

this construct can also be interpreted like a sequence of IF&apos;s

if (switchValue == Key1)
then
	Value1
else
	if (switchValue == Key2)
	then
		Value2
	else
		defaultValue.</Description>
            <ShortDescription>Evaluates a &quot;switch&quot; value, searches for the result as a key in a key-value pair list, then returns the paired value. If a value is not found a default value is returned</ShortDescription>
            <InputParameter Datatype="Any" Name="SwitchValue" Nullable="true" Relevance="3">
                <Description>The key to search for</Description>
            </InputParameter>
            <InputParameter Datatype="Any" Name="DefaultValue" Nullable="true" Relevance="1">
                <Description>The value returned if SwitchValue does not match any KeyValue</Description>
            </InputParameter>
            <InputParameter Datatype="Any" Name="Key" Nullable="true" ParameterIsList="true" Relevance="3">
                <Description>The first Key to compare with SwitchValue</Description>
            </InputParameter>
            <InputParameter Datatype="Any" Name="Value" Nullable="true" ParameterIsList="true" Relevance="1">
                <Description>The value paired with the preceding KeyValue</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>The value found; or the DefaultValue if the key was not found</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="79">
            <Name>Common.GetInputRecord</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>Returns the original Input Record</Description>
            <OutputParameter Datatype="String">
                <Description>The original input record</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="80">
            <Name>DateTime.Date2String</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>Converts a DateTime value to a string using a given format string. Use the &quot;new&quot; format specification e.g. %Y-%M-%D.</Description>
            <InputParameter Datatype="DateTime" Name="DateValue" Nullable="true" Relevance="2">
                <Description>The date value to be converted to a string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="2">
                <Description>The format string to use</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The formatted date value</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>03-02-2002-13.30.00.000000</InputParameter>
                    <InputParameter>%M-%D-%Y</InputParameter>
                    <OutputParameter>03-02-2002</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="310">
            <Name>DateTime.TimeStamp2String</Name>
            <MapperVersion from="8.7.0.01"/>
            <Description>Converts a TimeStamp value to a string using a given format string. Use the &quot;new&quot; format specification e.g. %Y-%M-%D and %f for microseconds.</Description>
            <InputParameter Datatype="DateTime" Name="TimeStampValue" Nullable="true" Relevance="2">
                <Description>The timestamp value to be converted to a string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FormatString" Nullable="false" Relevance="2">
                <Description>The format string to use</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The formatted date value</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>07-04-2017 13.30.25.558964</InputParameter>
                    <InputParameter>%U.%I.%S.%f</InputParameter>
                    <OutputParameter>13.30.25.558964</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="94" VariableInput="true" designerOnly="true">
			<Name>Loops.GetFieldValue</Name>
			<MapperVersion from="8.2.0.1"/>
			<Description>This function retrieves and returns the value of a specified field found by iterating over the list of defined records (corresponds to nested while loops). The filter criteria is evaluated for each record and if true the corresponding field is returned.</Description>
			<ShortDescription>Retrieves and returns the value of a specified field (1.parameter) if the filter criteria (2.parameter) is true. The list of records (3.-x.parameter) corresponds to nested while loops.</ShortDescription>
			
			<InputParameter Datatype="String" Name="FieldName" Nullable="false" Relevance="3">
                <Description>The field to search for</Description>
            </InputParameter>
            <InputParameter Datatype="Boolean" Name="FilterCriteria" Nullable="false" Relevance="3">
                <Description>If true the right sub record was found.</Description>
            </InputParameter>
            <InputParameter Datatype="SubRecord" Name="Records" Nullable="false" Relevance="3" ParameterIsList="true">
                <Description>One or more records to iterate over</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Value of the searched field</Description>
            </OutputParameter>
            <Examples>
				<Example>
				    <Comment>XML Message as precondition:&lt;Record&gt;&lt;Identifier&gt;&lt;Type&gt;SEDOL&lt;/Type&gt;&lt;Value&gt;B1WMD67&lt;/Value&gt;&lt;/Identifier&gt;&lt;Identifier&gt;&lt;Type&gt;ISIN&lt;/Type&gt;&lt;Value&gt;RU000A0JP5V6&lt;/Value&gt;&lt;/Identifier&gt;&lt;/Record&gt;</Comment>
				    <InputParameter>Record.Identifier.Value</InputParameter>
					<InputParameter>Record.Identifier.Type == "ISIN"</InputParameter>
					<InputParameter>Record.Identifier</InputParameter>
					<OutputParameter>RU000A0JP5V6</OutputParameter>
				</Example>
				<Example>
				    <Comment>XML Message as precondition:&lt;Record&gt;&lt;Identifier&gt;&lt;Type&gt;SEDOL&lt;/Type&gt;&lt;Value&gt;B1WMD67&lt;/Value&gt;&lt;/Identifier&gt;&lt;Identifier&gt;&lt;Type&gt;ISIN&lt;/Type&gt;&lt;Value&gt;RU000A0JP5V6&lt;/Value&gt;&lt;/Identifier&gt;&lt;/Record&gt;</Comment>
				    <InputParameter>Record.Identifier.Value</InputParameter>
					<InputParameter>Record.Identifier.Type == "ISIN"</InputParameter>
					<InputParameter>Record</InputParameter>
					<OutputParameter></OutputParameter>
				</Example>
			</Examples>
		</Function>
    <!--     <Function Type="Simple" FunctionNumber="93" VariableInput="true" obsolete="8.2.0.1">
			<Name>Loops.GetFieldValue</Name>
            <MapperVersion from="7.1.3.30" to="7.1.3.999"/>
            <MapperVersion from="8.2.0.1"/>
			<Description>This function retrieves and returns the value of a specified field found by iterating over the list of defined records (corresponds to nested while loops). The filter criteria is evaluated for each record and if "true" the corresponding field is returned.</Description>
			<ShortDescription>Retrieves and returns the value of a specified field (1.parameter). The filter criteria (2.parameter) can be "true" or "false". The list of records (3.-x.parameter) corresponds to nested while loops.</ShortDescription>
			
			<InputParameter Datatype="String" Name="FieldName" Nullable="false" Relevance="3">
                <Description>The field to search for</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="FilterCriteria" Nullable="false" Relevance="3">
                <Description>Two values "true" and "false" are possible. If "true" the right sub record was found. </Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Records" Nullable="false" Relevance="3" ParameterIsList="true">
                <Description>One or more records to iterate over</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Value of the searched field</Description>
            </OutputParameter>
            <Examples>
				<Example>
				    <Comment>XML Message as precondition:&lt;Record&gt;&lt;Identifier&gt;&lt;Type&gt;SEDOL&lt;/Type&gt;&lt;Value&gt;B1WMD67&lt;/Value&gt;&lt;/Identifier&gt;&lt;Identifier&gt;&lt;Type&gt;ISIN&lt;/Type&gt;&lt;Value&gt;RU000A0JP5V6&lt;/Value&gt;&lt;/Identifier&gt;&lt;/Record&gt;</Comment>
				    <InputParameter>[Record\Identifier\Value]</InputParameter>
					<InputParameter>If ([Record\Identifier\Type] == "ISIN") Then "true" Else "false"</InputParameter>
					<InputParameter>Record\Identifier</InputParameter>
					<OutputParameter>RU000A0JP5V6</OutputParameter>
				</Example>
				<Example>
				    <Comment>XML Message as precondition:&lt;Record&gt;&lt;Identifier&gt;&lt;Type&gt;SEDOL&lt;/Type&gt;&lt;Value&gt;B1WMD67&lt;/Value&gt;&lt;/Identifier&gt;&lt;Identifier&gt;&lt;Type&gt;ISIN&lt;/Type&gt;&lt;Value&gt;RU000A0JP5V6&lt;/Value&gt;&lt;/Identifier&gt;&lt;/Record&gt;</Comment>
				    <InputParameter>[Record\Identifier\Value]</InputParameter>
					<InputParameter>If ([Record\Identifier\Type] == "ISIN") Then "true" Else "false"</InputParameter>
					<InputParameter>Record</InputParameter>
					<OutputParameter></OutputParameter>
				</Example>
			</Examples>
		</Function> -->
        <Function Type="Simple" FunctionNumber="90">
            <Name>DateTime.DateFromString</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>Converts a date/time-formatted string (with a specified format) into a DateTime value using the format specification e.g. %Y-%M-%D:%H:%I:%S.</Description>
            <InputParameter Datatype="String" Name="InputDateString" Nullable="true" Relevance="2">
                <Description>The date/time value to be converted</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormatString" Nullable="false" Relevance="3">
                <Description>The date/time format of InputDateStringt</Description>
            </InputParameter>
            <OutputParameter Datatype="DateTime">
                <Description> The date/time value. If InputDateString is empty, return value is 01/01/01 00:00:00</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>03-02-2002-13.30.00</InputParameter>
                    <InputParameter>%M-%D-%Y-%H.%I.%S</InputParameter>
                    <OutputParameter>2002-03-02T13:30:00</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="311">
            <Name>DateTime.TimeStampFromString</Name>
            <MapperVersion from="8.7.0.01"/>
            <Description>Converts a TimeStamp formatted string (with a specified format) into a TimeStamp value using the format specification e.g. %Y-%M-%D %H:%I:%S.%f.</Description>
            <InputParameter Datatype="String" Name="InputDateString" Nullable="true" Relevance="2">
                <Description>The timestamp value to be converted</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputFormatString" Nullable="false" Relevance="3">
                <Description>The TimeStamp format of InputDateString</Description>
            </InputParameter>
            <OutputParameter Datatype="DateTime">
                <Description> The TimeStamp value. If InputDateString is empty, then the function throws error.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>07-04-2017 13.30.00</InputParameter>
                    <InputParameter>%M-%D-%Y %H.%I.%S</InputParameter>
                    <OutputParameter>07-04-2017 13.30.00.0</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>07-04-2017 13.30.25.8756</InputParameter>
                    <InputParameter>%M-%D-%Y %H.%I.%S.%f</InputParameter>
                    <OutputParameter>07-04-2017 13.30.25.8756</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="81">
            <Name>DateTime.Now</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>Returns the current time. This function replaces the functions DateTime.TimeStamp and DateTime.RealTimeStamp</Description>
            <OutputParameter Datatype="DateTime">
                <Description>The current system time</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <OutputParameter>2003-06-11-13.30.59.000000</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="82">
            <Name>DateTime.DateDiff</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>Calculates the difference between two dates in days(D/d), hours(H/h), minutes (M/m) or seconds(S/s).</Description>
            <InputParameter Datatype="DateTime" Name="FirstDate" Nullable="false" Relevance="3">
                <Description>The first date</Description>
            </InputParameter>
            <InputParameter Datatype="DateTime" Name="SecondDate" Nullable="false" Relevance="3">
                <Description>The second date</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="DiffSpecifier" Nullable="false" Relevance="3">
                <Description>This specifies the units in which the date/time difference should be calculated. Possible Values are: d, D, h, H, m, M, s, S.
d...Returns the days part of the difference without regard for hours, minutes, and seconds. Example: yesterday morning - today evening = 1 day.
D...Returns the total difference in days. Example: 8h - 20h = 0.5 days.
h...Returns only the hours part of the difference without regard for days, minutes, and seconds. Example: yesterday 12h - today 13:15h = 1 hour
H...Returns the total difference in hours. Example: Yesterday 12h - Today 13:15h = 25.25 hours.
m...Returns only the minutes part of the difference without regard for days, hours, and seconds. Example: 12:00:00h - 13:01:15 = 1 minute.
M...Returns the total difference in minutes. Example: 12:00:00h - 13:01:15 = 61.25 minutes.
s...Returns only the seconds part of the difference without regard for days, hours, and minutes. Example: 12:00:00h - 13:01:15 = 15 seconds.
S...Returns the total difference in seconds. Example: 12:00:00h - 12:01:15 = 75 seconds</Description>
            </InputParameter>
            <OutputParameter Datatype="IntOrFloat">
                <Description>The difference of the two date/time values.
The returned value datatype is FloatingPoint for uppercase DiffSpecifiers and Integer for lowercase DiffSpecifiers</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>d</InputParameter>
                    <OutputParameter>1 as INT</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>D</InputParameter>
                    <OutputParameter>1.5 as float</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>h</InputParameter>
                    <OutputParameter>12 as float</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>H</InputParameter>
                    <OutputParameter>36 as float</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>m</InputParameter>
                    <OutputParameter>0 as INT</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>M</InputParameter>
                    <OutputParameter>2160 as float</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>s</InputParameter>
                    <OutputParameter>0 as INT</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>2003-06-06-00.00.00</InputParameter>
                    <InputParameter>2003-06-07-12.00.00</InputParameter>
                    <InputParameter>S</InputParameter>
                    <OutputParameter>129600 as float</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="83">
            <Name>String.CheckIdentifier</Name>
            <MapperVersion from="7.3.3.5" to="7.3.9.999"/>
            <MapperVersion from="8.0.4.1"/>
            <Description>This function checks the given security identifier by calculating the checksum digit. If the checksum digit is missing, the checksum digit will be added to the identifier and the fully qualified identifier will be returned. E.g. if the input parameter is a CUSIP identifier of 8 digits, the function calculates the checksum digit and appends it, thus returning a valid CUSIP identifier. If the input parameter is a fully qualified CUSIP (9 digits), it just checks its validity and throws a mapping exception when necessary. Currently the function supports the following security identifiers: CUSIP, CINS, ISIN. This identifier type must be passed as the first input parameter.</Description>
            <ShortDescription>Calculates or checks certain security identifiers (currenlty supported are: CUSIP, CINS and ISIN)</ShortDescription>
            <InputParameter Datatype="String" Name="IdentType" Nullable="false" Relevance="3">
                <Description>Type of Security Identifier (a constant value such as &quot;CUSIP&quot;, &quot;CINS&quot; or &quot;ISIN&quot;)</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="IdentValue" Nullable="false" Relevance="3">
                <Description>Identifier Value (depending on the IdentType parameter this must be a suitable identifier, with or without the checksum digit)</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Fully qualified identifier (the return value always contains the checksum digit)</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="ParamError">
                    <Condition>The input parameter is not a valid CUSIP identifier.</Condition>
                </Exception>
            </Throws>
            <Examples>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>93114210</InputParameter>
                    <OutputParameter>931142103</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>50180320</InputParameter>
                    <OutputParameter>501803209</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>501803209</InputParameter>
                    <OutputParameter>501803209</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>501803200</InputParameter>
                    <OutputParameter>Causes a mapping exception:
Function &apos;CalcCUSIP&apos;, Parameter Nr.: 1, Value: 501803200, Errormessage: Parameter of mapping function not OK. Extended error message: Invalid CUSIP identifier: checksum digit &apos;0&apos; is invalid, expected checksum digit: &apos;9&apos;!</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>1234567</InputParameter>
                    <OutputParameter>Causes a mapping exception:
Function &apos;CalcCUSIP&apos;, Parameter Nr.: 1, Value: 1234567, Errormessage: Parameter of mapping function not OK. Extended error message: Invalid length of CUSIP identifier; it must consist of 8 digits (without checksum) or 9 digits (including the checksum digit)!</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="318">
            <Name>String.IsIdentifierValid</Name>
            <MapperVersion from="8.8.1.06"/>
            <Description>This function checks the given security identifier by calculating the checksum digit. If the checksum digit is missing, the checksum digit will be added to the identifier and the fully qualified identifier will be validated, return value will be true if valid else false.</Description>
            <ShortDescription>Calculates or checks certain security identifiers (currenlty supported are: CUSIP, CINS and ISIN)</ShortDescription>
            <InputParameter Datatype="String" Name="IdentType" Nullable="false" Relevance="3">
                <Description>Type of Security Identifier (a constant value such as &quot;CUSIP&quot;, &quot;CINS&quot; or &quot;ISIN&quot;)</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="IdentValue" Nullable="false" Relevance="3">
                <Description>Identifier Value (depending on the IdentType parameter this must be a suitable identifier, with or without the checksum digit)</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if identifier is valid, false otherwise.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>93114210</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>50180320</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>501803200</InputParameter>
                    <OutputParameter>FALSE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CUSIP</InputParameter>
                    <InputParameter>1234567</InputParameter>
                    <OutputParameter>FALSE</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="91">
            <Name>String.String2Hex</Name>
            <MapperVersion from="8.2.0.1"/>
            <Description>This function converts a string into its hexadecimal representation.</Description>
            <InputParameter Datatype="String" Name="StringValue" Nullable="true" Relevance="1">
                <Description>The string to convert</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Hex representation of input string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>AbX</InputParameter>
                    <OutputParameter>416258</OutputParameter>
                </Example>
            </Examples>
       </Function>
       <Function Type="Simple" FunctionNumber="92">
           <Name>String.Hex2String</Name>
           <MapperVersion from="8.2.0.1"/>
           <Description>This function converts a hexadecimal string representation into its original string.</Description>
           <InputParameter Datatype="String" Name="HexValue" Nullable="true" Relevance="1">
               <Description>The hex string to convert</Description>
           </InputParameter>
           <OutputParameter Datatype="String">
               <Description>Original string</Description>
           </OutputParameter>
           <Throws>
               <Exception Type="ParamError">
                   <Condition>Invalid hex digits found in input string</Condition>
               </Exception>
           </Throws>
           <Examples>
               <Example>
                   <InputParameter>416258</InputParameter>
                   <OutputParameter>AbX</OutputParameter>
               </Example>
           </Examples>
       </Function>
    </MappingFunctionLibrary>
    <MappingFunctionLibrary Name="MapDB">
        <Description>Contains the Select function and the domain value translation functions</Description>
        <MapperVersion from="1.1"/>
        <Function Type="Simple" FunctionNumber="100">
            <Name>Database.Select</Name>
            <MapperVersion from="1.1"/>
            <Description>This function is used to retrieve a certain value from a database. It requires a configuration MapDB.</Description>
            <InputParameter Datatype="String" Name="DatabaseName" Nullable="true" Relevance="3">
                <Description>Obsolete. This parameter is ignored</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="DefaultReturnValue" Nullable="true" Relevance="1">
                <Description>Default return value. This value to be returned if the SELECT result set is empty</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="SelectStatement" Nullable="false" Relevance="3">
                <Description>The SELECT statement itself. The statement can take up to five parameters referenced as &quot;:1&quot;, &quot;:2&quot;, &quot;:3&quot;, &quot;:4&quot;, and &quot;:5&quot;. The values of these parameters are specified by the following five input parameters:</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name=":1" Nullable="true" Relevance="3">
                <Description>Select parameter 1, mapped input field or a constant string</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name=":2" Nullable="true" Relevance="3">
                <Description>Select parameter 2</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name=":3" Nullable="true" Relevance="3">
                <Description>Select parameter 3</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name=":4" Nullable="true" Relevance="3">
                <Description>Select parameter 4</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name=":5" Nullable="true" Relevance="3">
                <Description>Select parameter 5</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Returns the first column of the first row of the result, or the specified &quot;DefaultReturnValue&quot; if the result set was empty</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="113">
            <Name>Database.TranslateEDMV2IDMVEx</Name>
            <MapperVersion from="8.1.1.1"/>
            <Description>This function converts an external domain value into an internal domain value.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Value" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Field Data Class ID" Nullable="true" Relevance="3">
                <Description>Field Data Class ID. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Field ID" Nullable="true" Relevance="3">
                <Description>Field ID. May be left empty for global values</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The internal value. Returns the first column of the first row of the result</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="104">
            <Name>Database.TranslateEDMV2IDMV</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function converts an external domain value into an internal domain value.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Value" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The internal value. Returns the first column of the first row of the result</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="105">
            <Name>Database.TranslateIDMV2EDMV</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function converts an internal domain value into an external domain value.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Internal Value" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The external domain value</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="106">
            <Name>Database.TranslateEIST2ISTY</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function converts an external issue type into an internal issue type.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Issue Type" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The internal issue type value</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="107">
            <Name>Database.TranslateEIST2ISCD</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function retrieves the issue type code for the external issue type.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Issue Type" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The internal issue type code</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="108">
            <Name>Database.TranslateISCD2EIST</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function converts an internal issue type into an external issue type.
Note: The select statement of this function may return multiple values. Only the first result will be returned.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Issue Type Code" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The external issue type. Returns the first column of the first row of the result</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="109">
            <Name>Database.TranslateEIAT2IATY</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function converts an external issue action type into an internal issue action type.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Issue Action Type" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The internal issue action type value</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="110">
            <Name>Database.TranslateEIAT2IACD</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function retrieves the issue action type code for the external issue action type.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Issue Action Type" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The internal issue action type code</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="111">
            <Name>Database.TranslateIACD2EIAT</Name>
            <MapperVersion from="6.3.0.1"/>
            <Description>This function converts an internal issue action type into an external issue action type.
Note: The select statement of this function may return multiple values. Only the first result will be returned.</Description>
            <InputParameter Datatype="String" Name="Vendor" Nullable="false" Relevance="3">
                <Description>Vendor name. E.g. Telekurs, Bloomberg, ...</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="NLS-Code" Nullable="true" Relevance="3">
                <Description>NLS Code. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="External Field Id" Nullable="true" Relevance="3">
                <Description>External Field Id to be used. May be left empty for global values</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Issue Type Code" Nullable="false" Relevance="3">
                <Description>External value to be mapped into the internal value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>The external issue action type. Returns the first column of the first row of the result</Description>
            </OutputParameter>
        </Function>
    </MappingFunctionLibrary>
    <MappingFunctionLibrary Name="MapFuncTE">
        <Description>Contains the External Translation</Description>
        <MapperVersion from="2.2.0.1"/>
        <Function Type="Simple" FunctionNumber="199" VariableInput="true" obsolete="8.1.0.1">
            <Name>Translation.TranslateExternal</Name>
            <MapperVersion from="2.2.0.1"/>
            <Description>This function substitutes a value from an translation table in an external file for an input value. It works with external XML files in much the same way that the Translate functions use internal translation tables, with following extensions:
-	It is possible to leave columns empty. This acts as a wildcard to qualify a table row in case there is no exact match.
-	More than one input field for the search of the corresponding result is allowed.
-	Storage of the translation table outside of the msf (this enables reuse of a translation table in more than one msf). The table must be stored in an XML file. Two different format types are available.

To use TranslateExternal, you must specify one of the following translation methods:

BY_VALUE compares the input parameters against the values in the translation table from left to right. This means it searches in the first column for the first input parameter. If a value is found, it continues searching at the current line in the second column for the second parameter and so on. If no value is found, the method returns an empty string.

BY_VALUE_BESTFIT compares the input parameters against all lines of the translation table. It returns the line that has the smallest number of default values. In case it finds more than one line with the same number of defaults, it picks the row that has the defaults at the end of the row. This means that a match in the first column is more significant than a match in the second column.

BY_ORDER returns the first line that matches the input parameters.

Preparing the External Translation Table

TranslateExternal uses an external translation table in XML format and its corresponding DTD file for input processing and validation. For creating and editing the XML file, it is strongly recommended that you use the External Translation Table Editor in MappingComposer; select External Translation Tables from the Tools menu.
NOTE:
There are two different types of translation tables:
-	&quot;By Value&quot; tables, used for translation methods BY_VALUE and BY_VALUE_BESTFIT
-	&quot;By Order&quot; tables, used for translation method BY_ORDER
Be sure to select the right type when creating a new table in External Translation Table Editor.</Description>
            <ShortDescription>First Parameter has to be the file name of the external translation file. Second Parameter has to be the TYPE ( BY_ORDER / BY_VALUE )</ShortDescription>
            <InputParameter Datatype="String" Name="TranslationTable" Nullable="false" Relevance="3">
                <Description>The filename of the translation table that is to be used by the function. This can be either a fully qualified filename (containing pathname and filename) or the filename only, in which case the mapping function retrieves the path from the mapper configuration (TranslateExternalDir from MappingConfig.reg)</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="TranslationMethod" Nullable="false" Relevance="3">
                <Description>This value must be either &quot;BY_VALUE&quot; or &quot;BY_ORDER&quot; or &quot;BY_VALUE_BESTFIT. No other values are valid.</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="InputValues" Nullable="true" Relevance="3" ParameterIsList="true">
                <Description>One or more input fields for the search of a corresponding result</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Translated value from translation table</Description>
            </OutputParameter>
            <Throws>
                <Exception Type="Limit">
                    <Condition>TranslationMethod is an other value than &quot;BY_VALUE&quot; or &quot;BY_ORDER&quot; or &quot;BY_VALUE_BESTFIT&quot;</Condition>
                </Exception>
            </Throws>
        </Function>
    </MappingFunctionLibrary>
    <MappingFunctionLibrary Name="MapFuncFidelity">
        <Description>Functions that are only useful for Fidelity</Description>
        <MapperVersion from="1" to="1.9.9.9"/>
        <MapperVersion from="6"/>
        <Function Type="Simple" FunctionNumber="206">
            <Name>String.PrefNum</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function is used for Fidelity processing. It takes a numeric value and concatenates it to the string &quot;CHOICE&quot;.</Description>
            <InputParameter Name="InputField" Datatype="Integer" Nullable="true" Relevance="1">
                <Description>The numeric field which should be concatenated to the string &quot;CHOICE&quot;</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Because in this example the input field got the value &quot;10&quot; the result of the function is &quot;CHOICE10&quot;
Note: If the InputField value is NULL the number 01 will be concatenated to the string CHOICE</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>17</InputParameter>
                    <OutputParameter>CHOICE17</OutputParameter>
                </Example>
                <Example>
                    <InputParameter/>
                    <OutputParameter>CHOICE01</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="207">
            <Name>Logical.DoDeliver</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function is used for Fidelity processing. It determines if the payout argument for the current Fidelity type 2 record is &quot;SH&quot; and the new share type argument is &quot;C&quot; (deliver old shares and receive new shares ).
The DoDeliver function returns TRUE only once for each record processed; all subsequent calls return FALSE.</Description>
            <ShortDescription>Returns true if payout=SH and sharetype=C</ShortDescription>
            <InputParameter Datatype="String" Name="Payout" Nullable="true" Relevance="3">
                <Description>The payout argument field</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="Sharetype" Nullable="true" Relevance="3">
                <Description>The new sharetype argument field</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if the payout parameter is &quot;SH&quot; AND the sharetype parameter is &quot;C&quot;; otherwise False.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>SH</InputParameter>
                    <InputParameter>C</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>XY</InputParameter>
                    <InputParameter>C</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="209">
            <Name>Logical.DupPayMeth</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>Fidelity processing. Checks for presence of Fidelity type 2 records having the same field values.

Returns TRUE for the current notification record (after all Fidelity type 2 records have been processed), if any Fidelity type 2 record has the same fields as another Fidelity type 2 rec.</Description>
            <ShortDescription>Checks if the same payout method type exists within type 2 records with same preference number</ShortDescription>
            <InputParameter Datatype="String" Name="PayMethod" Nullable="true" InputField="true" Relevance="3">
                <Description>The Payout Method type of the Fidelity type two record</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="PrevNumber" Nullable="true" InputField="true" Relevance="3">
                <Description>The Previous Number of the Fidelity type two record</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if one of the previous Fidelity type two records had got the same values for the two input fields like the current Fidelity type two record; otherwise False.</Description>
            </OutputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="210">
            <Name>Fidelity.GetDeliverIaip</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function has to be used in a Fidelity type two loop. It reports when the last Fidelity type two record is reached and if one of the previous Fidelity type two records had got the characters &quot;SR&quot; or &quot;PR&quot; in the given input field.</Description>
            <InputParameter Datatype="String" Name="PayoutMethodType" Nullable="true" Relevance="3">
                <Description>This has to be the field &quot;Payout Method type&quot; of the Fidelity type 2 record</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True returned if the last Fidelity type two record is reached and one of the Fidelity type two records had got the strings &quot;SR&quot; or &quot;PR&quot; in the given field PayoutMethodType; otherwise False.</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <Comment>Description of the preconditions: The current record is the last Fidelity Type 2 record and at least one of the previous Fidelity type two records got the strings &quot;SR&quot; in the field PayoutMethodType</Comment>
                    <InputParameter>PayoutMethodType( Nr. 1)</InputParameter>
                    <InputParameter>PayoutMethodType( Nr. 1)</InputParameter>
                    <OutputParameter>true</OutputParameter>
                </Example>
                <Example>
                    <Comment>Description of the preconditions: The current record is not the last Fidelity Type 2 record</Comment>
                    <InputParameter>XY</InputParameter>
                    <InputParameter>C</InputParameter>
                    <OutputParameter>false</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="203">
            <Name>String.FidOffer</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function is used for Fidelity processing. It searches for the first Fidelity record of type &quot;02&quot; in which the Corporate Action Type is &quot;DUTCHA&quot; (Dutch Auction) and Payout Method Type Code is &quot;CA&quot;.
Note: This function can be used for processing Fidelity type 02 records only..</Description>
            <ShortDescription>Searches for the first Fidelity record of type &quot;02&quot; in which the Corporate Action Type is &quot;DUTCHA&quot; (Dutch Auction) and Payout Method Type Code is &quot;CA&quot;.</ShortDescription>
            <InputParameter Datatype="String" Name="CASearchPos" Nullable="true" InputField="true" Relevance="3">
                <Description>The parameter for the Payout Method Type Code field</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="DUTCHASearchPos" Nullable="true" InputField="true" Relevance="3">
                <Description>The parameter for the Corporate Action Type field</Description>
            </InputParameter>
            <InputParameter Datatype="Any" Name="ResultPos" Nullable="true" InputField="true" Relevance="1">
                <Description>This parameter holds the position of which the value is returned if a Fidelity type 2 record with Corporate Action Type &quot;DUTCHA&quot; and Payout Method Type Code &quot;CA&quot; is found</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>If a Fidelity type 2 record with Corporate Action Type &quot;DUTCHA&quot; and Payout Method Type Code &quot;CA&quot; is found the value of the field - which is identified by the ResultPos parameter - is returned. Otherwise an empty string is returned</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>CA</InputParameter>
                    <InputParameter>DUTCHA</InputParameter>
                    <InputParameter>RESULT</InputParameter>
                    <OutputParameter>RESULT</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>CA</InputParameter>
                    <InputParameter>XXX</InputParameter>
                    <InputParameter>NOTHING</InputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="202">
            <Name>Common.TermsSeq</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function is used for Fidelity processing. It returns the next sequence number in a TermsLoop</Description>
            <OutputParameter Datatype="Integer">
                <Description>The next sequence number in a TermsLoop</Description>
            </OutputParameter>
        </Function>
        <Function Type="FlowOperator" FunctionNumber="200">
            <Name>Loops.SeqLoop</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <MapperVersion from="6.0.0.1">
                <Obsolete>Use BeginWhile with the type &quot;02&quot; subrecord</Obsolete>
            </MapperVersion>
            <Description>The SeqLoop function loops through all Fidelity Type 2 records</Description>
        </Function>
        <Function Type="FlowOperator" FunctionNumber="201">
            <Name>Loops.PrefLoop</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <Description>This function is used for Fidelity processing. It provides for looping through all type 2 sub-records and only returning the first one that has a new preference. For example if there are 4 subrecords as follows:

Preference number	Sequence number
1	1
1	2
2	1
2	2

Only the first and the third will be processed.</Description>
            <ShortDescription>This function is used for Fidelity processing. It loops through type 2 records with a new sequence number</ShortDescription>
            <InputParameter Datatype="Integer" Name="Preference number" Nullable="true" InputField="true" Relevance="3">
                <Description>The preference number</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="Sequence number" Nullable="true" InputField="true" Relevance="3">
                <Description>The sequence number</Description>
            </InputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="208" obsolete="8.1.0.1">
            <!-- Flow Operator -->
            <Name>Loops.TermsLoop</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.0.0.8"/>
            <MapperVersion from="6.0.0.1">
                <Obsolete>Use BeginWhile with the type &quot;03&quot; subrecord</Obsolete>
            </MapperVersion>
            <Description>This function is used for Fidelity processing. It loops through all Fidelity Type 3 records.</Description>
        </Function>
        <Function Type="Simple" FunctionNumber="212" obsolete="8.1.0.1">
            <!-- Flow Operator -->
            <Name>Loops.PrefCashLoop_obsolete</Name>
            <MapperVersion from="1.1" to="1.9.9.9"/>
            <MapperVersion from="2.2.0.7"/>
            <MapperVersion from="2.3.0.1">
                <Obsolete>Use PrefCash</Obsolete>
            </MapperVersion>
            <Description>This function is used for Fidelity processing. It provides looping through all type 2 sub-records, which have the characters &quot;CA&quot; in their pay-out method type for each sequence. The sequence &amp; preference number is found using fix start &amp; end positions for these numbers.
Preference number is indicated due to start position 11 and end position 12.
Sequence number is indicated due to startposition 13 and end position 14.

In the following table we see some subrecords of type two and their preference number, sequence number &amp; their payoutmethodtypefield value.

Subrecord type 2 No.	Preference number	Sequence number	PayoutMethod typefield Value
1	1	1	CA
2	1	2	XX
3	1	2	CA
4	2	1	XX
5	2	2	CA
6	2	3	CA
7	2	3	CA
8	2	3	CA
In this example only the subrecords 1,5,6,7,8 will be processed.</Description>
            <ShortDescription>Loops through all Fidelity type 2 records, which have the characters &quot;CA&quot; in their payout method type</ShortDescription>
            <InputParameter Datatype="String" Name="PayoutMethodTypefield" Nullable="true" InputField="true" Relevance="3">
                <Description>The payout method type field</Description>
            </InputParameter>
        </Function>
        <Function Type="Simple" FunctionNumber="213" obsolete="8.1.0.1">
            <!-- Flow Operator -->
            <Name>Loops.PrefCashLoop</Name>
            <MapperVersion from="2.3.0.1"/>
            <Description>This function is used for Fidelity processing. It provides looping through all type 2 subrecords, which have the characters &quot;CA&quot; in their pay-out method type for each sequence.
In the following table we see some subrecords of type two and their preference number, sequence number &amp; their payoutmethodtypefield value.

Subrecord type 2 No.	Preference number	Sequence number	PayoutMethod typefield Value
1	1	1	CA
2	1	2	XX
3	1	2	CA
4	2	1	XX
5	2	2	CA
6	2	3	CA
7	2	3	CA
8	2	3	CA

In this example only the subrecords 1,5,6,7,8 will be processed.</Description>
            <ShortDescription>Loops through all Fidelity type 2 records, which have the characters &quot;CA&quot; in their payout method type</ShortDescription>
            <InputParameter Datatype="Integer" Name="PreferenceNumberField" Nullable="false" InputField="true" Relevance="3">
                <Description>The preference number field</Description>
            </InputParameter>
            <InputParameter Datatype="Integer" Name="SequenceNumberField" Nullable="false" InputField="true" Relevance="3">
                <Description>The sequence number field</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="PayoutMethodTypefield" Nullable="true" InputField="true" Relevance="3">
                <Description>The payout method type field</Description>
            </InputParameter>
        </Function>
    </MappingFunctionLibrary>
    <MappingFunctionLibrary Name="MapFuncTelekurs">
        <Description>Functions that are only useful for Telekurs processing</Description>
        <MapperVersion from="6"/>
        <Function Type="Simple" FunctionNumber="250">
            <Name>Telekurs.HasChangeIndicatorOf</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function is used for Telekurs processing. It computes the field&apos;s change-indicator associated with a field and returns True when the change-indicator from the feed is represented in the second parameter. This function allows decisions based on the change indicators of fields.</Description>
            <ShortDescription>Returns if the input table field given as first parameter has a change indicator given as string in the second parameter</ShortDescription>
            <InputParameter Datatype="Any" Name="InputTableField" Nullable="true" InputField="true" Relevance="3">
                <Description>InputTableField</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="ChangeIndicators" Nullable="false" Relevance="3">
                <Description>Characters indicating a change of the field</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if Indicator is found; otherwise False</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>NotEmptyField, ChangeIndicator=Deleted</InputParameter>
                    <InputParameter>D</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField, ChangeIndicator=Deleted</InputParameter>
                    <InputParameter>D</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>NotEmptyField, ChangeIndicator=Changed</InputParameter>
                    <InputParameter>D</InputParameter>
                    <OutputParameter>FALSE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField, ChangeIndicator=Changed</InputParameter>
                    <InputParameter>D</InputParameter>
                    <OutputParameter>FALSE</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="251">
            <Name>Telekurs.GetNewValue</Name>
            <MapperVersion from="6.0.0.1"/>
            <Description>This function is used for Telekurs processing. It first computes the change indicator for the field given in the first parameter (InputTableField), then checks whether that indicator can be found in the second parameter (ChangeIndicator). If successful, it returns the actual field value. Otherwise it checks whether the actual indicator can be found in the third parameter (DeleteIndicator), if successful, it returns a empty value with the send-null flag set. Otherwise it returns an empty value. In any case the datatype of the returned value equals the datatype of the provided input value.</Description>
            <ShortDescription>Checks whether the indicator can be found in the 2nd parameter. If successful it returns the actual field value. Otherwise it checks whether the actual indicator can be found in the 3rd parameter. If successful, it returns the send-null-macro</ShortDescription>
            <InputParameter Datatype="Any" Name="InputTableField" Nullable="true" InputField="true" Relevance="1">
                <Description>InputTableField</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="ChangeIndicator" Nullable="false" Relevance="3">
                <Description>Characters indicating a change</Description>
            </InputParameter>
            <InputParameter Datatype="String" Name="DeleteIndicator" Nullable="false" Relevance="3">
                <Description>Characters indicating a deleted field</Description>
            </InputParameter>
            <OutputParameter Datatype="Any">
                <Description>Either the input value, the send null macro or empty string</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>NotEmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Changed</InputParameter>
                    <OutputParameter>InputField</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Changed</InputParameter>
                    <OutputParameter>Exception: corrupt input</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>NotEmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Deleted</InputParameter>
                    <OutputParameter>EmptyField, SetSendNullFlag=true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Deleted</InputParameter>
                    <OutputParameter>EmptyField, SetSendNullFlag=true</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>NotEmptyField</InputParameter>
                    <InputParameter>ChangeIndicator cannot be retrieved</InputParameter>
                    <OutputParameter>Exception: corrupt input</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField</InputParameter>
                    <InputParameter>ChangeIndicator cannot be retrieved</InputParameter>
                    <OutputParameter>EmptyField</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="252" VariableInput="true">
            <Name>Telekurs.OneHasValueOrDeleted</Name>
            <MapperVersion from="6.2.0.1"/>
            <Description>This function is used for Telekurs processing. It calculates the &quot;OR&quot; combination of OneHasValue || HasChangeIndicatorOf(&apos;D&apos;).</Description>
            <ShortDescription/>
            <InputParameter Datatype="Any" Name="InputTableField" Nullable="true" InputField="true" ParameterIsList="true">
                <Description>InputTableField</Description>
            </InputParameter>
            <OutputParameter Datatype="Boolean">
                <Description>True if Indicator is found</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>NotEmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Deleted</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>NotEmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Changed</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Deleted</InputParameter>
                    <OutputParameter>TRUE</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>EmptyField</InputParameter>
                    <InputParameter>ChangeIndicator=Changed</InputParameter>
                    <OutputParameter>FALSE</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="253">
            <Name>Telekurs.DecodeValorNumber</Name>
            <MapperVersion from="6.3.1.17" to="6.3.1.17"/>
            <MapperVersion from="7.1.3.1"/>
            <Description>This function decodes the Telekurs key value and returns the Valor Number part of the decoded string.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="1">
                <Description>Encoded Telekurs key value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Valor Number</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>103r1k0ESJfHuQC0</InputParameter>
                    <OutputParameter>1003630</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>803U4jNvjPOli8wX</InputParameter>
                    <OutputParameter>909613</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="254">
            <Name>Telekurs.DecodeCorpActId</Name>
            <MapperVersion from="6.3.1.17" to="6.3.1.17"/>
            <MapperVersion from="7.1.3.1"/>
            <Description>This function decodes the Telekurs key value and returns the &quot;Corporate Action Id&quot; or the &quot;Cash Flow Id&quot; part of the decoded string.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="1">
                <Description>Encoded Telekurs key value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Corporate Action Id</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>706s6e00bM+5zU40</InputParameter>
                    <OutputParameter>1530221</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>103r1k0ESJfHuQC0</InputParameter>
                    <OutputParameter>37859613</OutputParameter>
                </Example>
            </Examples>
        </Function>
        <Function Type="Simple" FunctionNumber="255">
            <Name>Telekurs.DecodeVDFKey</Name>
            <MapperVersion from="6.3.1.17" to="6.3.1.17"/>
            <MapperVersion from="7.1.3.1"/>
            <Description>This function performs the decoding step only and returns the resulting string as is. This function can be useful in case Telekurs delivers other information than the currently known key types.</Description>
            <InputParameter Datatype="String" Name="Key" Nullable="false" Relevance="1">
                <Description>Encoded Telekurs key value</Description>
            </InputParameter>
            <OutputParameter Datatype="String">
                <Description>Decoded Key</Description>
            </OutputParameter>
            <Examples>
                <Example>
                    <InputParameter>706s6e00bM+5zU40</InputParameter>
                    <OutputParameter>001794472000153022100000000</OutputParameter>
                </Example>
                <Example>
                    <InputParameter>803U4jNvjPOli8wX</InputParameter>
                    <OutputParameter>000909613401004120800100001</OutputParameter>
                </Example>
            </Examples>
        </Function>
    </MappingFunctionLibrary>
    <Namespaces>
        <Namespace Name="Common" DisplayName="Common">
            <Description>Common mapping functions. E.g. Error and Transaction handling, ...</Description>
        </Namespace>
        <Namespace Name="Math" DisplayName="Mathematics">
            <Description>Calculation functions (+,-,*,/)</Description>
        </Namespace>
        <Namespace Name="DateTime" DisplayName="Date&amp;Time">
            <Description>Date and Time functions (formatting, calculation, ...).
		
		Format Specification:

Due to historical reasons there are two different format specifications used by the various date/time functions.
The functions listed below use the &quot;new&quot; syntax to parse date or time values: (referred to as the &quot;new&quot; format specification).


    -   DateTime.DateEqual
    -   DateTime.DateGreater
    -   DateTime.DateGreaterEqual
    -   DateTime.DateLess
    -   DateTime.DateLessEqual
    -   DateTime.DateDiffDays
    -   DateTime.DateDiffSeconds
    -   DateTime.DateTime2Float 
    -   DateTime.Float2DateTime 
    -   DateTime.ReformatDateTime
    -   DateTime.ReformatTimeStamp
    -   DateTime.RelativeDate
    -   DateTime.RelativeTime

New Date/Time Syntax

Tokens	Description
%Y		The 4-digit year with leading zeroes.
%y		The 4-digit year without leading zeroes.
%R		The 2-digit year with leading zeroes.
%r		The 2-digit year without leading zeroes.
%M		The month as a number with leading zeroes.
%m		The month as a number without leading zeroes.
%O		The long name of the month all uppercase.
%o		The short name of the month all uppercase.
%N		The long name of the month all lowercase.
%n		The short name of the month all lowercase.
%T		The long name of the month in mixed case.
%t		The short name of the month in mixed case.
%D		The day with leading zeroes.
%d		The day without leading zeroes.
%H		The hour in 24-hour format with leading zeroes.
%h		The hour in 24-hour format without leading zeroes.
%U		The hour in 12-hour format with leading zeroes.
%u		The hour in 12-hour format without leading zeroes.
%I		The minute with leading zeroes.
%i		The minute without leading zeroes.
%S		The second with leading zeroes.
%s		The second without leading zeroes.
%A		The AM/PM indicator all uppercase.
%a		The AM/PM indicator all lowercase.
%W	The long name of the weekday in mixed case.
%w	The short name of the weekday in mixed case.

The functions listed below use the old date/time format specification:

    -   DateTime.FormatDateTime
    -   DateTime.Transform2FTIDate

Old Date/Time Format Specification
 YYYY	for 4 digit years
 MM  for 2 digit month
 DD  for 2 digit days
 hh  for 2 digit hours
 mm  for 2 digit minutes
 ss  for 2 digit seconds
Any other character can be used for unspecified input data that is ignored by the mapper engine.
 
Note: The format characters are case sensitive; two-digit years and one-digit days or months are not supported by this format specification. Examples for the different format strings can be found with each function&apos;s description.</Description>
        </Namespace>
        <Namespace Name="Logical" DisplayName="Logical">
            <Description>Conditional functions (IF, And, SwitchCase, AllHaveValue, Equal, Greater, ...)</Description>
        </Namespace>
        <Namespace Name="Loops" DisplayName="Loops">
            <Description>Looping functions (BeginWhile, EndWhile, Fidelity Loops, ...)</Description>
        </Namespace>
        <Namespace Name="Translation" DisplayName="Translation">
            <Description>Functions for using internal and external translation tables</Description>
        </Namespace>
        <Namespace Name="Database" DisplayName="Database">
            <Description>Database function: Select and domain value translation functions</Description>
        </Namespace>
        <Namespace Name="String" DisplayName="String">
            <Description>String related functions. E.g. StrCat, StrCmp, StrLen, StrReplace, SubString, Upper-, LowerCase, .</Description>
        </Namespace>
        <Namespace Name="Store" DisplayName="Store">
            <Description>Store Functions</Description>
        </Namespace>
        <!-- These Namespaces are not in use currently:
&lt;Namespace Name=&quot;String.format&quot; DisplayName=&quot;String Formatting&quot;&gt;
		&lt;Description&gt;String formation functions&lt;/Description&gt;
	&lt;/Namespace&gt;
	&lt;Namespace Name=&quot;Reporting&quot; DisplayName=&quot;Reporting&quot;&gt;
		&lt;Description&gt;Error/Warning Reporting and Handling Functions&lt;/Description&gt;
	&lt;/Namespace&gt;
-->
        <!--Namespace Name=&quot;Conversion&quot; DisplayName=&quot;Conversion&quot;&gt;
		&lt;Description&gt;Functions to convert between the built in datatypes&lt;/Description&gt;
	&lt;/Namespace-->
        <!--Namespace Name=&quot;Date&quot; DisplayName=&quot;Date&quot;&gt;
&lt;Description&gt;Date and Time related Functions (formatting, calculation, ...)&lt;/Description&gt;
	&lt;/Namespace-->
        <Namespace Name="Telekurs" DisplayName="Telekurs">
            <Description>Functions to serve Telekurs specific needs</Description>
        </Namespace>
        <Namespace Name="Fidelity" DisplayName="Fidelity">
            <Description>Fidelity specific Functions</Description>
        </Namespace>
    </Namespaces>
</MappingFunctions>
